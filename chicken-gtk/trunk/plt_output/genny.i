const gchar* gtk_action_group_get_name(GtkActionGroup *self );
gboolean gtk_action_group_get_sensitive(GtkActionGroup *self );
none gtk_action_group_set_sensitive(GtkActionGroup *self ,gboolean sensitive);
gboolean gtk_action_group_get_visible(GtkActionGroup *self );
none gtk_action_group_set_visible(GtkActionGroup *self ,gboolean visible);
GtkAction* gtk_action_group_get_action(GtkActionGroup *self ,const gchar* action_name);
GList* gtk_action_group_list_actions(GtkActionGroup *self );
none gtk_action_group_add_action(GtkActionGroup *self ,GtkAction* action);
none gtk_action_group_add_action_with_accel(GtkActionGroup *self ,GtkAction* action,const gchar* accelerator);
none gtk_action_group_remove_action(GtkActionGroup *self ,GtkAction* action);
none gtk_action_group_add_actions(GtkActionGroup *self ,const GtkActionEntry* entries,guint n_entries,gpointer user_data);
none gtk_action_group_add_toggle_actions(GtkActionGroup *self ,const GtkToggleActionEntry* entries,guint n_entries,gpointer user_data);
none gtk_action_group_add_radio_actions(GtkActionGroup *self ,const GtkRadioActionEntry* entries,guint n_entries,gint value,GCallback on_change,gpointer user_data);
none gtk_action_group_add_actions_full(GtkActionGroup *self ,const GtkActionEntry* entries,guint n_entries,gpointer user_data,GDestroyNotify destroy);
none gtk_action_group_add_toggle_actions_full(GtkActionGroup *self ,const GtkToggleActionEntry* entries,guint n_entries,gpointer user_data,GDestroyNotify destroy);
none gtk_action_group_add_radio_actions_full(GtkActionGroup *self ,const GtkRadioActionEntry* entries,guint n_entries,gint value,GCallback on_change,gpointer user_data,GDestroyNotify destroy);
none gtk_action_group_set_translate_func(GtkActionGroup *self ,GtkTranslateFunc func,gpointer data,GtkDestroyNotify notify);
none gtk_action_group_set_translation_domain(GtkActionGroup *self ,const gchar* domain);
const gchar* gtk_action_group_translate_string(GtkActionGroup *self ,const gchar* string);
GtkActionGroup* gtk_action_group_new(const gchar* name);
none gtk_accel_group_lock(GtkAccelGroup *self );
none gtk_accel_group_unlock(GtkAccelGroup *self );
none gtk_accel_group_connect(GtkAccelGroup *self ,guint accel_key,GdkModifierType accel_mods,GtkAccelFlags accel_flags,GClosure* closure);
none gtk_accel_group_connect_by_path(GtkAccelGroup *self ,const gchar* accel_path,GClosure* closure);
gboolean gtk_accel_group_disconnect(GtkAccelGroup *self ,GClosure* closure);
gboolean gtk_accel_group_disconnect_key(GtkAccelGroup *self ,guint accel_key,GdkModifierType accel_mods);
gboolean gtk_accel_group_activate(GtkAccelGroup *self ,GQuark accel_quark,GObject* acceleratable,guint accel_key,GdkModifierType accel_mods);
GtkAccelKey* gtk_accel_group_find(GtkAccelGroup *self ,GtkAccelGroupFindFunc find_func,gpointer data);
GtkAccelGroupEntry* gtk_accel_group_query(GtkAccelGroup *self ,guint accel_key,GdkModifierType accel_mods,guint* n_entries);
GtkAccelGroup* gtk_accel_group_new();
const gchar* gtk_action_get_name(GtkAction *self );
gboolean gtk_action_is_sensitive(GtkAction *self );
gboolean gtk_action_get_sensitive(GtkAction *self );
none gtk_action_set_sensitive(GtkAction *self ,gboolean sensitive);
gboolean gtk_action_is_visible(GtkAction *self );
gboolean gtk_action_get_visible(GtkAction *self );
none gtk_action_set_visible(GtkAction *self ,gboolean visible);
none gtk_action_activate(GtkAction *self );
GtkWidget* gtk_action_create_icon(GtkAction *self ,GtkIconSize icon_size);
GtkWidget* gtk_action_create_menu_item(GtkAction *self );
GtkWidget* gtk_action_create_tool_item(GtkAction *self );
none gtk_action_connect_proxy(GtkAction *self ,GtkWidget* proxy);
none gtk_action_disconnect_proxy(GtkAction *self ,GtkWidget* proxy);
GSList* gtk_action_get_proxies(GtkAction *self );
none gtk_action_connect_accelerator(GtkAction *self );
none gtk_action_disconnect_accelerator(GtkAction *self );
const gchar* gtk_action_get_accel_path(GtkAction *self );
GClosure* gtk_action_get_accel_closure(GtkAction *self );
none gtk_action_block_activate_from(GtkAction *self ,GtkWidget* proxy);
none gtk_action_unblock_activate_from(GtkAction *self ,GtkWidget* proxy);
none gtk_action_set_accel_path(GtkAction *self ,const gchar* accel_path);
none gtk_action_set_accel_group(GtkAction *self ,GtkAccelGroup* accel_group);
GtkAction* gtk_action_new(const gchar* name,const gchar* label,const gchar* tooltip,const gchar* stock_id);
none gtk_toggle_action_toggled(GtkToggleAction *self );
none gtk_toggle_action_set_active(GtkToggleAction *self ,gboolean is_active);
gboolean gtk_toggle_action_get_active(GtkToggleAction *self );
none gtk_toggle_action_set_draw_as_radio(GtkToggleAction *self ,gboolean draw_as_radio);
gboolean gtk_toggle_action_get_draw_as_radio(GtkToggleAction *self );
GtkToggleAction* gtk_toggle_action_new(const gchar* name,const gchar* label,const gchar* tooltip,const gchar* stock_id);
GSList* gtk_radio_action_get_group(GtkRadioAction *self );
none gtk_radio_action_set_group(GtkRadioAction *self ,GSList* group);
gint gtk_radio_action_get_current_value(GtkRadioAction *self );
GtkRadioAction* gtk_radio_action_new(const gchar* name,const gchar* label,const gchar* tooltip,const gchar* stock_id,gint value);
GtkWidget* gtk_entry_completion_get_entry(GtkEntryCompletion *self );
none gtk_entry_completion_set_model(GtkEntryCompletion *self ,GtkTreeModel* model);
GtkTreeModel* gtk_entry_completion_get_model(GtkEntryCompletion *self );
none gtk_entry_completion_set_match_func(GtkEntryCompletion *self ,GtkEntryCompletionMatchFunc func,gpointer func_data,GDestroyNotify func_notify);
none gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion *self ,gint length);
gint gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion *self );
none gtk_entry_completion_complete(GtkEntryCompletion *self );
none gtk_entry_completion_insert_prefix(GtkEntryCompletion *self );
none gtk_entry_completion_insert_action_text(GtkEntryCompletion *self ,gint index_,const gchar* text);
none gtk_entry_completion_insert_action_markup(GtkEntryCompletion *self ,gint index_,const gchar* markup);
none gtk_entry_completion_delete_action(GtkEntryCompletion *self ,gint index_);
none gtk_entry_completion_set_inline_completion(GtkEntryCompletion *self ,gboolean inline_completion);
gboolean gtk_entry_completion_get_inline_completion(GtkEntryCompletion *self );
none gtk_entry_completion_set_popup_completion(GtkEntryCompletion *self ,gboolean popup_completion);
gboolean gtk_entry_completion_get_popup_completion(GtkEntryCompletion *self );
none gtk_entry_completion_set_popup_set_width(GtkEntryCompletion *self ,gboolean popup_set_width);
gboolean gtk_entry_completion_get_popup_set_width(GtkEntryCompletion *self );
none gtk_entry_completion_set_popup_single_match(GtkEntryCompletion *self ,gboolean popup_single_match);
gboolean gtk_entry_completion_get_popup_single_match(GtkEntryCompletion *self );
none gtk_entry_completion_set_text_column(GtkEntryCompletion *self ,gint column);
gint gtk_entry_completion_get_text_column(GtkEntryCompletion *self );
GtkEntryCompletion* gtk_entry_completion_new();
none gtk_icon_factory_add(GtkIconFactory *self ,const gchar* stock_id,GtkIconSet* icon_set);
GtkIconSet* gtk_icon_factory_lookup(GtkIconFactory *self ,const gchar* stock_id);
none gtk_icon_factory_add_default(GtkIconFactory *self );
none gtk_icon_factory_remove_default(GtkIconFactory *self );
GtkIconFactory* gtk_icon_factory_new();
none gtk_icon_theme_set_screen(GtkIconTheme *self ,GdkScreen* screen);
none gtk_icon_theme_set_search_path(GtkIconTheme *self ,const gchar* * path,gint n_elements);
none gtk_icon_theme_get_search_path(GtkIconTheme *self ,gchar** * path,gint* n_elements);
none gtk_icon_theme_append_search_path(GtkIconTheme *self ,const gchar* path);
none gtk_icon_theme_prepend_search_path(GtkIconTheme *self ,const gchar* path);
none gtk_icon_theme_set_custom_theme(GtkIconTheme *self ,const gchar* theme_name);
gboolean gtk_icon_theme_has_icon(GtkIconTheme *self ,const gchar* icon_name);
gint* gtk_icon_theme_get_icon_sizes(GtkIconTheme *self ,const gchar* icon_name);
GtkIconInfo* gtk_icon_theme_lookup_icon(GtkIconTheme *self ,const gchar* icon_name,gint size,GtkIconLookupFlags flags);
GdkPixbuf* gtk_icon_theme_load_icon(GtkIconTheme *self ,const gchar* icon_name,gint size,GtkIconLookupFlags flags,GError** error);
GList* gtk_icon_theme_list_icons(GtkIconTheme *self ,const gchar* context);
char* gtk_icon_theme_get_example_icon_name(GtkIconTheme *self );
gboolean gtk_icon_theme_rescan_if_needed(GtkIconTheme *self );
GtkIconTheme* gtk_icon_theme_new();
none gtk_list_store_set_column_types(GtkListStore *self ,gint n_columns,GType* types);
none gtk_list_store_set_value(GtkListStore *self ,GtkTreeIter* iter,gint column,GValue* value);
none gtk_list_store_set(GtkListStore *self ,GtkTreeIter* iter);
none gtk_list_store_set_valist(GtkListStore *self ,GtkTreeIter* iter,va_list var_args);
gboolean gtk_list_store_remove(GtkListStore *self ,GtkTreeIter* iter);
none gtk_list_store_insert(GtkListStore *self ,GtkTreeIter* iter,gint position);
none gtk_list_store_insert_before(GtkListStore *self ,GtkTreeIter* iter,GtkTreeIter* sibling);
none gtk_list_store_insert_after(GtkListStore *self ,GtkTreeIter* iter,GtkTreeIter* sibling);
none gtk_list_store_insert_with_values(GtkListStore *self ,GtkTreeIter* iter,gint position);
none gtk_list_store_insert_with_valuesv(GtkListStore *self ,GtkTreeIter* iter,gint position,gint* columns,GValue* values,gint n_values);
none gtk_list_store_prepend(GtkListStore *self ,GtkTreeIter* iter);
none gtk_list_store_append(GtkListStore *self ,GtkTreeIter* iter);
none gtk_list_store_clear(GtkListStore *self );
gboolean gtk_list_store_iter_is_valid(GtkListStore *self ,GtkTreeIter* iter);
none gtk_list_store_reorder(GtkListStore *self ,gint* new_order);
none gtk_list_store_swap(GtkListStore *self ,GtkTreeIter* a,GtkTreeIter* b);
none gtk_list_store_move_after(GtkListStore *self ,GtkTreeIter* iter,GtkTreeIter* position);
none gtk_list_store_move_before(GtkListStore *self ,GtkTreeIter* iter,GtkTreeIter* position);
GtkListStore* gtk_list_store_new(gint n_columns);
none gtk_object_sink(GtkObject *self );
none gtk_object_destroy(GtkObject *self );
GtkObject* gtk_object_ref(GtkObject *self );
none gtk_object_unref(GtkObject *self );
none gtk_object_weakref(GtkObject *self ,GtkDestroyNotify notify,gpointer data);
none gtk_object_weakunref(GtkObject *self ,GtkDestroyNotify notify,gpointer data);
none gtk_object_set_data(GtkObject *self ,const gchar* key,gpointer data);
none gtk_object_set_data_full(GtkObject *self ,const gchar* key,gpointer data,GtkDestroyNotify destroy);
none gtk_object_remove_data(GtkObject *self ,const gchar* key);
gpointer gtk_object_get_data(GtkObject *self ,const gchar* key);
none gtk_object_remove_no_notify(GtkObject *self ,const gchar* key);
none gtk_object_set_user_data(GtkObject *self ,gpointer data);
gpointer gtk_object_get_user_data(GtkObject *self );
none gtk_object_set_data_by_id(GtkObject *self ,GQuark data_id,gpointer data);
none gtk_object_set_data_by_id_full(GtkObject *self ,GQuark data_id,gpointer data,GtkDestroyNotify destroy);
gpointer gtk_object_get_data_by_id(GtkObject *self ,GQuark data_id);
none gtk_object_remove_data_by_id(GtkObject *self ,GQuark data_id);
none gtk_object_remove_no_notify_by_id(GtkObject *self ,GQuark key_id);
none gtk_object_get(GtkObject *self ,const gchar* first_property_name);
none gtk_object_set(GtkObject *self ,const gchar* first_property_name);
GtkObject* gtk_object_new(GtkType type,const gchar* first_property_name);
none gtk_tooltips_enable(GtkTooltips *self );
none gtk_tooltips_disable(GtkTooltips *self );
none gtk_tooltips_set_delay(GtkTooltips *self ,guint delay);
none gtk_tooltips_set_tip(GtkTooltips *self ,GtkWidget* widget,const gchar* tip_text,const gchar* tip_private);
none gtk_tooltips_force_window(GtkTooltips *self );
GtkTooltips* gtk_tooltips_new();
none gtk_tree_view_column_pack_start(GtkTreeViewColumn *self ,GtkCellRenderer* cell,gboolean expand);
none gtk_tree_view_column_pack_end(GtkTreeViewColumn *self ,GtkCellRenderer* cell,gboolean expand);
none gtk_tree_view_column_clear(GtkTreeViewColumn *self );
GList* gtk_tree_view_column_get_cell_renderers(GtkTreeViewColumn *self );
none gtk_tree_view_column_add_attribute(GtkTreeViewColumn *self ,GtkCellRenderer* cell_renderer,const gchar* attribute,gint column);
none gtk_tree_view_column_set_attributes(GtkTreeViewColumn *self ,GtkCellRenderer* cell_renderer);
none gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn *self ,GtkCellRenderer* cell_renderer,GtkTreeCellDataFunc func,gpointer func_data,GtkDestroyNotify destroy);
none gtk_tree_view_column_clear_attributes(GtkTreeViewColumn *self ,GtkCellRenderer* cell_renderer);
none gtk_tree_view_column_set_spacing(GtkTreeViewColumn *self ,gint spacing);
gint gtk_tree_view_column_get_spacing(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_visible(GtkTreeViewColumn *self ,gboolean visible);
gboolean gtk_tree_view_column_get_visible(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_resizable(GtkTreeViewColumn *self ,gboolean resizable);
gboolean gtk_tree_view_column_get_resizable(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_sizing(GtkTreeViewColumn *self ,GtkTreeViewColumnSizing type);
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing(GtkTreeViewColumn *self );
gint gtk_tree_view_column_get_width(GtkTreeViewColumn *self );
gint gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn *self ,gint fixed_width);
none gtk_tree_view_column_set_min_width(GtkTreeViewColumn *self ,gint min_width);
gint gtk_tree_view_column_get_min_width(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_max_width(GtkTreeViewColumn *self ,gint max_width);
gint gtk_tree_view_column_get_max_width(GtkTreeViewColumn *self );
none gtk_tree_view_column_clicked(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_title(GtkTreeViewColumn *self ,const gchar* title);
const gchar* gtk_tree_view_column_get_title(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_expand(GtkTreeViewColumn *self ,gboolean expand);
gboolean gtk_tree_view_column_get_expand(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_clickable(GtkTreeViewColumn *self ,gboolean clickable);
gboolean gtk_tree_view_column_get_clickable(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_widget(GtkTreeViewColumn *self ,GtkWidget* widget);
GtkWidget* gtk_tree_view_column_get_widget(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_alignment(GtkTreeViewColumn *self ,gfloat xalign);
gfloat gtk_tree_view_column_get_alignment(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_reorderable(GtkTreeViewColumn *self ,gboolean reorderable);
gboolean gtk_tree_view_column_get_reorderable(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn *self ,gint sort_column_id);
gint gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn *self ,gboolean setting);
gboolean gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn *self );
none gtk_tree_view_column_set_sort_order(GtkTreeViewColumn *self ,GtkSortType order);
GtkSortType gtk_tree_view_column_get_sort_order(GtkTreeViewColumn *self );
none gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn *self ,GtkTreeModel* tree_model,GtkTreeIter* iter,gboolean is_expander,gboolean is_expanded);
none gtk_tree_view_column_cell_get_size(GtkTreeViewColumn *self ,GdkRectangle* cell_area,gint* x_offset,gint* y_offset,gint* width,gint* height);
gboolean gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn *self );
none gtk_tree_view_column_focus_cell(GtkTreeViewColumn *self ,GtkCellRenderer* cell);
gboolean gtk_tree_view_column_cell_get_position(GtkTreeViewColumn *self ,GtkCellRenderer* cell_renderer,gint* start_pos,gint* width);
none gtk_tree_view_column_queue_resize(GtkTreeViewColumn *self );
GtkTreeViewColumn* gtk_tree_view_column_new();
GtkWidget* gtk_widget_ref(GtkWidget *self );
none gtk_widget_unref(GtkWidget *self );
none gtk_widget_destroy(GtkWidget *self );
none gtk_widget_destroyed(GtkWidget *self ,GtkWidget** widget_pointer);
none gtk_widget_set(GtkWidget *self ,const gchar* first_property_name);
none gtk_widget_unparent(GtkWidget *self );
none gtk_widget_show(GtkWidget *self );
none gtk_widget_show_now(GtkWidget *self );
none gtk_widget_hide(GtkWidget *self );
none gtk_widget_show_all(GtkWidget *self );
none gtk_widget_hide_all(GtkWidget *self );
none gtk_widget_set_no_show_all(GtkWidget *self ,gboolean no_show_all);
gboolean gtk_widget_get_no_show_all(GtkWidget *self );
none gtk_widget_map(GtkWidget *self );
none gtk_widget_unmap(GtkWidget *self );
none gtk_widget_realize(GtkWidget *self );
none gtk_widget_unrealize(GtkWidget *self );
none gtk_widget_queue_draw(GtkWidget *self );
none gtk_widget_queue_draw_area(GtkWidget *self ,gint x,gint y,gint width,gint height);
none gtk_widget_queue_clear(GtkWidget *self );
none gtk_widget_queue_clear_area(GtkWidget *self ,gint x,gint y,gint width,gint height);
none gtk_widget_queue_resize(GtkWidget *self );
none gtk_widget_queue_resize_no_redraw(GtkWidget *self );
none gtk_widget_draw(GtkWidget *self ,GdkRectangle* area);
none gtk_widget_size_request(GtkWidget *self ,GtkRequisition* requisition);
none gtk_widget_size_allocate(GtkWidget *self ,GtkAllocation* allocation);
none gtk_widget_get_child_requisition(GtkWidget *self ,GtkRequisition* requisition);
none gtk_widget_add_accelerator(GtkWidget *self ,const gchar* accel_signal,GtkAccelGroup* accel_group,guint accel_key,GdkModifierType accel_mods,GtkAccelFlags accel_flags);
gboolean gtk_widget_remove_accelerator(GtkWidget *self ,GtkAccelGroup* accel_group,guint accel_key,GdkModifierType accel_mods);
none gtk_widget_set_accel_path(GtkWidget *self ,const gchar* accel_path,GtkAccelGroup* accel_group);
GList* gtk_widget_list_accel_closures(GtkWidget *self );
gboolean gtk_widget_can_activate_accel(GtkWidget *self ,guint signal_id);
gboolean gtk_widget_mnemonic_activate(GtkWidget *self ,gboolean group_cycling);
gboolean gtk_widget_event(GtkWidget *self ,GdkEvent* event);
gint gtk_widget_send_expose(GtkWidget *self ,GdkEvent* event);
gboolean gtk_widget_activate(GtkWidget *self );
gboolean gtk_widget_set_scroll_adjustments(GtkWidget *self ,GtkAdjustment* hadjustment,GtkAdjustment* vadjustment);
none gtk_widget_reparent(GtkWidget *self ,GtkWidget* new_parent);
gboolean gtk_widget_intersect(GtkWidget *self ,GdkRectangle* area,GdkRectangle* intersection);
GdkRegion* gtk_widget_region_intersect(GtkWidget *self ,GdkRegion* region);
none gtk_widget_freeze_child_notify(GtkWidget *self );
none gtk_widget_child_notify(GtkWidget *self ,const gchar* child_property);
none gtk_widget_thaw_child_notify(GtkWidget *self );
gboolean gtk_widget_is_focus(GtkWidget *self );
none gtk_widget_grab_focus(GtkWidget *self );
none gtk_widget_grab_default(GtkWidget *self );
none gtk_widget_set_name(GtkWidget *self ,const gchar* name);
const gchar* gtk_widget_get_name(GtkWidget *self );
none gtk_widget_set_state(GtkWidget *self ,GtkStateType state);
none gtk_widget_set_sensitive(GtkWidget *self ,gboolean sensitive);
none gtk_widget_set_app_paintable(GtkWidget *self ,gboolean app_paintable);
none gtk_widget_set_double_buffered(GtkWidget *self ,gboolean double_buffered);
none gtk_widget_set_redraw_on_allocate(GtkWidget *self ,gboolean redraw_on_allocate);
none gtk_widget_set_parent(GtkWidget *self ,GtkWidget* parent);
none gtk_widget_set_parent_window(GtkWidget *self ,GdkWindow* parent_window);
none gtk_widget_set_child_visible(GtkWidget *self ,gboolean is_visible);
gboolean gtk_widget_get_child_visible(GtkWidget *self );
GtkWidget* gtk_widget_get_parent(GtkWidget *self );
GdkWindow* gtk_widget_get_parent_window(GtkWidget *self );
gboolean gtk_widget_child_focus(GtkWidget *self ,GtkDirectionType direction);
none gtk_widget_set_size_request(GtkWidget *self ,gint width,gint height);
none gtk_widget_get_size_request(GtkWidget *self ,gint* width,gint* height);
none gtk_widget_set_uposition(GtkWidget *self ,gint x,gint y);
none gtk_widget_set_usize(GtkWidget *self ,gint width,gint height);
none gtk_widget_set_events(GtkWidget *self ,gint events);
none gtk_widget_add_events(GtkWidget *self ,gint events);
none gtk_widget_set_extension_events(GtkWidget *self ,GdkExtensionMode mode);
GdkExtensionMode gtk_widget_get_extension_events(GtkWidget *self );
GtkWidget* gtk_widget_get_toplevel(GtkWidget *self );
GtkWidget* gtk_widget_get_ancestor(GtkWidget *self ,GType widget_type);
GdkColormap* gtk_widget_get_colormap(GtkWidget *self );
GdkVisual* gtk_widget_get_visual(GtkWidget *self );
GdkScreen* gtk_widget_get_screen(GtkWidget *self );
gboolean gtk_widget_has_screen(GtkWidget *self );
GdkDisplay* gtk_widget_get_display(GtkWidget *self );
GdkWindow* gtk_widget_get_root_window(GtkWidget *self );
GtkSettings* gtk_widget_get_settings(GtkWidget *self );
GtkClipboard* gtk_widget_get_clipboard(GtkWidget *self ,GdkAtom selection);
AtkObject* gtk_widget_get_accessible(GtkWidget *self );
none gtk_widget_set_colormap(GtkWidget *self ,GdkColormap* colormap);
gint gtk_widget_get_events(GtkWidget *self );
none gtk_widget_get_pointer(GtkWidget *self ,gint* x,gint* y);
gboolean gtk_widget_is_ancestor(GtkWidget *self ,GtkWidget* ancestor);
gboolean gtk_widget_translate_coordinates(GtkWidget *self ,GtkWidget* dest_widget,gint src_x,gint src_y,gint* dest_x,gint* dest_y);
gboolean gtk_widget_hide_on_delete(GtkWidget *self );
none gtk_widget_set_style(GtkWidget *self ,GtkStyle* style);
none gtk_widget_ensure_style(GtkWidget *self );
GtkStyle* gtk_widget_get_style(GtkWidget *self );
none gtk_widget_modify_style(GtkWidget *self ,GtkRcStyle* style);
GtkRcStyle* gtk_widget_get_modifier_style(GtkWidget *self );
none gtk_widget_modify_fg(GtkWidget *self ,GtkStateType state,const GdkColor* color);
none gtk_widget_modify_bg(GtkWidget *self ,GtkStateType state,const GdkColor* color);
none gtk_widget_modify_text(GtkWidget *self ,GtkStateType state,const GdkColor* color);
none gtk_widget_modify_base(GtkWidget *self ,GtkStateType state,const GdkColor* color);
none gtk_widget_modify_font(GtkWidget *self ,PangoFontDescription* font_desc);
PangoContext* gtk_widget_create_pango_context(GtkWidget *self );
PangoContext* gtk_widget_get_pango_context(GtkWidget *self );
PangoLayout* gtk_widget_create_pango_layout(GtkWidget *self ,const gchar* text);
GdkPixbuf* gtk_widget_render_icon(GtkWidget *self ,const gchar* stock_id,GtkIconSize size,const gchar* detail);
none gtk_widget_set_composite_name(GtkWidget *self ,const gchar* name);
gchar* gtk_widget_get_composite_name(GtkWidget *self );
none gtk_widget_reset_rc_styles(GtkWidget *self );
none gtk_widget_style_get_property(GtkWidget *self ,const gchar* property_name,GValue* value);
none gtk_widget_style_get_valist(GtkWidget *self ,const gchar* first_property_name,va_list var_args);
none gtk_widget_style_get(GtkWidget *self ,const gchar* first_property_name);
none gtk_widget_set_direction(GtkWidget *self ,GtkTextDirection dir);
GtkTextDirection gtk_widget_get_direction(GtkWidget *self );
none gtk_widget_shape_combine_mask(GtkWidget *self ,GdkBitmap* shape_mask,gint offset_x,gint offset_y);
none gtk_widget_reset_shapes(GtkWidget *self );
none gtk_widget_path(GtkWidget *self ,guint* path_length,gchar** path,gchar** path_reversed);
none gtk_widget_class_path(GtkWidget *self ,guint* path_length,gchar** path,gchar** path_reversed);
GList* gtk_widget_list_mnemonic_labels(GtkWidget *self );
none gtk_widget_add_mnemonic_label(GtkWidget *self ,GtkWidget* label);
none gtk_widget_remove_mnemonic_label(GtkWidget *self ,GtkWidget* label);
GtkWidget* gtk_widget_new(GType type,const gchar* first_property_name);
none gtk_ruler_set_metric(GtkRuler *self ,GtkMetricType metric);
none gtk_ruler_set_range(GtkRuler *self ,gdouble lower,gdouble upper,gdouble position,gdouble max_size);
none gtk_ruler_draw_ticks(GtkRuler *self );
none gtk_ruler_draw_pos(GtkRuler *self );
GtkMetricType gtk_ruler_get_metric(GtkRuler *self );
none gtk_ruler_get_range(GtkRuler *self ,gdouble* lower,gdouble* upper,gdouble* position,gdouble* max_size);
none gtk_range_set_update_policy(GtkRange *self ,GtkUpdateType policy);
GtkUpdateType gtk_range_get_update_policy(GtkRange *self );
none gtk_range_set_adjustment(GtkRange *self ,GtkAdjustment* adjustment);
GtkAdjustment* gtk_range_get_adjustment(GtkRange *self );
none gtk_range_set_inverted(GtkRange *self ,gboolean setting);
gboolean gtk_range_get_inverted(GtkRange *self );
none gtk_range_set_increments(GtkRange *self ,gdouble step,gdouble page);
none gtk_range_set_range(GtkRange *self ,gdouble min,gdouble max);
none gtk_range_set_value(GtkRange *self ,gdouble value);
gdouble gtk_range_get_value(GtkRange *self );
none gtk_scale_set_digits(GtkScale *self ,gint digits);
gint gtk_scale_get_digits(GtkScale *self );
none gtk_scale_set_draw_value(GtkScale *self ,gboolean draw_value);
gboolean gtk_scale_get_draw_value(GtkScale *self );
none gtk_scale_set_value_pos(GtkScale *self ,GtkPositionType pos);
GtkPositionType gtk_scale_get_value_pos(GtkScale *self );
PangoLayout* gtk_scale_get_layout(GtkScale *self );
none gtk_scale_get_layout_offsets(GtkScale *self ,gint* x,gint* y);
none gtk_progress_set_show_text(GtkProgress *self ,gboolean show_text);
none gtk_progress_set_text_alignment(GtkProgress *self ,gfloat x_align,gfloat y_align);
none gtk_progress_set_format_string(GtkProgress *self ,const gchar* format);
none gtk_progress_set_adjustment(GtkProgress *self ,GtkAdjustment* adjustment);
none gtk_progress_configure(GtkProgress *self ,gdouble value,gdouble min,gdouble max);
none gtk_progress_set_percentage(GtkProgress *self ,gdouble percentage);
none gtk_progress_set_value(GtkProgress *self ,gdouble value);
gdouble gtk_progress_get_value(GtkProgress *self );
none gtk_progress_set_activity_mode(GtkProgress *self ,gboolean activity_mode);
gchar* gtk_progress_get_current_text(GtkProgress *self );
gchar* gtk_progress_get_text_from_value(GtkProgress *self ,gdouble value);
gdouble gtk_progress_get_current_percentage(GtkProgress *self );
gdouble gtk_progress_get_percentage_from_value(GtkProgress *self ,gdouble value);
none gtk_progress_bar_pulse(GtkProgressBar *self );
none gtk_progress_bar_set_text(GtkProgressBar *self ,const gchar* text);
none gtk_progress_bar_set_fraction(GtkProgressBar *self ,gdouble fraction);
none gtk_progress_bar_set_pulse_step(GtkProgressBar *self ,gdouble fraction);
none gtk_progress_bar_set_orientation(GtkProgressBar *self ,GtkProgressBarOrientation orientation);
const gchar* gtk_progress_bar_get_text(GtkProgressBar *self );
gdouble gtk_progress_bar_get_fraction(GtkProgressBar *self );
gdouble gtk_progress_bar_get_pulse_step(GtkProgressBar *self );
GtkProgressBarOrientation gtk_progress_bar_get_orientation(GtkProgressBar *self );
none gtk_progress_bar_set_ellipsize(GtkProgressBar *self ,PangoEllipsizeMode mode);
PangoEllipsizeMode gtk_progress_bar_get_ellipsize(GtkProgressBar *self );
none gtk_progress_bar_set_bar_style(GtkProgressBar *self ,GtkProgressBarStyle style);
none gtk_progress_bar_set_discrete_blocks(GtkProgressBar *self ,guint blocks);
none gtk_progress_bar_set_activity_step(GtkProgressBar *self ,guint step);
none gtk_progress_bar_set_activity_blocks(GtkProgressBar *self ,guint blocks);
none gtk_progress_bar_update(GtkProgressBar *self ,gdouble percentage);
GtkWidget* gtk_progress_bar_new();
none gtk_preview_size(GtkPreview *self ,gint width,gint height);
none gtk_preview_put(GtkPreview *self ,GdkWindow* window,GdkGC* gc,gint srcx,gint srcy,gint destx,gint desty,gint width,gint height);
none gtk_preview_draw_row(GtkPreview *self ,guchar* data,gint x,gint y,gint w);
none gtk_preview_set_expand(GtkPreview *self ,gboolean expand);
none gtk_preview_set_dither(GtkPreview *self ,GdkRgbDither dither);
GtkWidget* gtk_preview_new(GtkPreviewType type);
none gtk_old_editable_claim_selection(GtkOldEditable *self ,gboolean claim,guint32 time_);
none gtk_old_editable_changed(GtkOldEditable *self );
none gtk_text_set_editable(GtkText *self ,gboolean editable);
none gtk_text_set_word_wrap(GtkText *self ,gboolean word_wrap);
none gtk_text_set_line_wrap(GtkText *self ,gboolean line_wrap);
none gtk_text_set_adjustments(GtkText *self ,GtkAdjustment* hadj,GtkAdjustment* vadj);
none gtk_text_set_point(GtkText *self ,guint index);
guint gtk_text_get_point(GtkText *self );
guint gtk_text_get_length(GtkText *self );
none gtk_text_freeze(GtkText *self );
none gtk_text_thaw(GtkText *self );
none gtk_text_insert(GtkText *self ,GdkFont* font,const GdkColor* fore,const GdkColor* back,const char* chars,gint length);
gboolean gtk_text_backward_delete(GtkText *self ,guint nchars);
gboolean gtk_text_forward_delete(GtkText *self ,guint nchars);
GtkWidget* gtk_text_new(GtkAdjustment* hadj,GtkAdjustment* vadj);
none gtk_misc_set_alignment(GtkMisc *self ,gfloat xalign,gfloat yalign);
none gtk_misc_get_alignment(GtkMisc *self ,gfloat* xalign,gfloat* yalign);
none gtk_misc_set_padding(GtkMisc *self ,gint xpad,gint ypad);
none gtk_misc_get_padding(GtkMisc *self ,gint* xpad,gint* ypad);
none gtk_label_set_text(GtkLabel *self ,const gchar* str);
const gchar* gtk_label_get_text(GtkLabel *self );
none gtk_label_set_attributes(GtkLabel *self ,PangoAttrList* attrs);
PangoAttrList* gtk_label_get_attributes(GtkLabel *self );
none gtk_label_set_label(GtkLabel *self ,const gchar* str);
const gchar* gtk_label_get_label(GtkLabel *self );
none gtk_label_set_markup(GtkLabel *self ,const gchar* str);
none gtk_label_set_use_markup(GtkLabel *self ,gboolean setting);
gboolean gtk_label_get_use_markup(GtkLabel *self );
none gtk_label_set_use_underline(GtkLabel *self ,gboolean setting);
gboolean gtk_label_get_use_underline(GtkLabel *self );
none gtk_label_set_markup_with_mnemonic(GtkLabel *self ,const gchar* str);
guint gtk_label_get_mnemonic_keyval(GtkLabel *self );
none gtk_label_set_mnemonic_widget(GtkLabel *self ,GtkWidget* widget);
GtkWidget* gtk_label_get_mnemonic_widget(GtkLabel *self );
none gtk_label_set_text_with_mnemonic(GtkLabel *self ,const gchar* str);
none gtk_label_set_justify(GtkLabel *self ,GtkJustification jtype);
GtkJustification gtk_label_get_justify(GtkLabel *self );
none gtk_label_set_ellipsize(GtkLabel *self ,PangoEllipsizeMode mode);
PangoEllipsizeMode gtk_label_get_ellipsize(GtkLabel *self );
none gtk_label_set_width_chars(GtkLabel *self ,gint n_chars);
gint gtk_label_get_width_chars(GtkLabel *self );
none gtk_label_set_max_width_chars(GtkLabel *self ,gint n_chars);
gint gtk_label_get_max_width_chars(GtkLabel *self );
none gtk_label_set_pattern(GtkLabel *self ,const gchar* pattern);
none gtk_label_set_line_wrap(GtkLabel *self ,gboolean wrap);
gboolean gtk_label_get_line_wrap(GtkLabel *self );
none gtk_label_set_selectable(GtkLabel *self ,gboolean setting);
gboolean gtk_label_get_selectable(GtkLabel *self );
none gtk_label_set_angle(GtkLabel *self ,gdouble angle);
gdouble gtk_label_get_angle(GtkLabel *self );
none gtk_label_select_region(GtkLabel *self ,gint start_offset,gint end_offset);
gboolean gtk_label_get_selection_bounds(GtkLabel *self ,gint* start,gint* end);
PangoLayout* gtk_label_get_layout(GtkLabel *self );
none gtk_label_get_layout_offsets(GtkLabel *self ,gint* x,gint* y);
none gtk_label_set_single_line_mode(GtkLabel *self ,gboolean single_line_mode);
gboolean gtk_label_get_single_line_mode(GtkLabel *self );
none gtk_label_get(GtkLabel *self ,gchar** str);
guint gtk_label_parse_uline(GtkLabel *self ,const gchar* string);
GtkWidget* gtk_label_new(const gchar* str);
GtkWidget* gtk_accel_label_get_accel_widget(GtkAccelLabel *self );
guint gtk_accel_label_get_accel_width(GtkAccelLabel *self );
none gtk_accel_label_set_accel_widget(GtkAccelLabel *self ,GtkWidget* accel_widget);
none gtk_accel_label_set_accel_closure(GtkAccelLabel *self ,GClosure* accel_closure);
gboolean gtk_accel_label_refetch(GtkAccelLabel *self );
GtkWidget* gtk_accel_label_new(const gchar* string);
none gtk_image_clear(GtkImage *self );
none gtk_image_set_from_pixmap(GtkImage *self ,GdkPixmap* pixmap,GdkBitmap* mask);
none gtk_image_set_from_image(GtkImage *self ,GdkImage* gdk_image,GdkBitmap* mask);
none gtk_image_set_from_file(GtkImage *self ,const gchar* filename);
none gtk_image_set_from_pixbuf(GtkImage *self ,GdkPixbuf* pixbuf);
none gtk_image_set_from_stock(GtkImage *self ,const gchar* stock_id,GtkIconSize size);
none gtk_image_set_from_icon_set(GtkImage *self ,GtkIconSet* icon_set,GtkIconSize size);
none gtk_image_set_from_animation(GtkImage *self ,GdkPixbufAnimation* animation);
none gtk_image_set_from_icon_name(GtkImage *self ,const gchar* icon_name,GtkIconSize size);
none gtk_image_set_pixel_size(GtkImage *self ,gint pixel_size);
GtkImageType gtk_image_get_storage_type(GtkImage *self );
none gtk_image_get_pixmap(GtkImage *self ,GdkPixmap** pixmap,GdkBitmap** mask);
none gtk_image_get_image(GtkImage *self ,GdkImage** gdk_image,GdkBitmap** mask);
GdkPixbuf* gtk_image_get_pixbuf(GtkImage *self );
none gtk_image_get_stock(GtkImage *self ,gchar** stock_id,GtkIconSize* size);
none gtk_image_get_icon_set(GtkImage *self ,GtkIconSet** icon_set,GtkIconSize* size);
GdkPixbufAnimation* gtk_image_get_animation(GtkImage *self );
none gtk_image_get_icon_name(GtkImage *self ,const gchar** icon_name,GtkIconSize* size);
gint gtk_image_get_pixel_size(GtkImage *self );
none gtk_image_set(GtkImage *self ,GdkImage* val,GdkBitmap* mask);
none gtk_image_get(GtkImage *self ,GdkImage** val,GdkBitmap** mask);
GtkWidget* gtk_image_new();
none gtk_arrow_set(GtkArrow *self ,GtkArrowType arrow_type,GtkShadowType shadow_type);
GtkWidget* gtk_arrow_new(GtkArrowType arrow_type,GtkShadowType shadow_type);
none gtk_pixmap_set(GtkPixmap *self ,GdkPixmap* val,GdkBitmap* mask);
none gtk_pixmap_get(GtkPixmap *self ,GdkPixmap** val,GdkBitmap** mask);
none gtk_pixmap_set_build_insensitive(GtkPixmap *self ,gboolean build);
GtkWidget* gtk_pixmap_new(GdkPixmap* pixmap,GdkBitmap* mask);
none gtk_invisible_set_screen(GtkInvisible *self ,GdkScreen* screen);
GdkScreen* gtk_invisible_get_screen(GtkInvisible *self );
GtkWidget* gtk_invisible_new();
none gtk_entry_set_visibility(GtkEntry *self ,gboolean visible);
gboolean gtk_entry_get_visibility(GtkEntry *self );
none gtk_entry_set_invisible_char(GtkEntry *self ,gunichar ch);
gunichar gtk_entry_get_invisible_char(GtkEntry *self );
none gtk_entry_set_has_frame(GtkEntry *self ,gboolean setting);
gboolean gtk_entry_get_has_frame(GtkEntry *self );
none gtk_entry_set_max_length(GtkEntry *self ,gint max);
gint gtk_entry_get_max_length(GtkEntry *self );
none gtk_entry_set_activates_default(GtkEntry *self ,gboolean setting);
gboolean gtk_entry_get_activates_default(GtkEntry *self );
none gtk_entry_set_width_chars(GtkEntry *self ,gint n_chars);
gint gtk_entry_get_width_chars(GtkEntry *self );
none gtk_entry_set_text(GtkEntry *self ,const gchar* text);
const gchar* gtk_entry_get_text(GtkEntry *self );
PangoLayout* gtk_entry_get_layout(GtkEntry *self );
none gtk_entry_get_layout_offsets(GtkEntry *self ,gint* x,gint* y);
none gtk_entry_set_alignment(GtkEntry *self ,gfloat xalign);
gfloat gtk_entry_get_alignment(GtkEntry *self );
none gtk_entry_set_completion(GtkEntry *self ,GtkEntryCompletion* completion);
GtkEntryCompletion* gtk_entry_get_completion(GtkEntry *self );
gint gtk_entry_layout_index_to_text_index(GtkEntry *self ,gint layout_index);
gint gtk_entry_text_index_to_layout_index(GtkEntry *self ,gint text_index);
none gtk_entry_append_text(GtkEntry *self ,const gchar* text);
none gtk_entry_prepend_text(GtkEntry *self ,const gchar* text);
none gtk_entry_set_position(GtkEntry *self ,gint position);
none gtk_entry_select_region(GtkEntry *self ,gint start,gint end);
none gtk_entry_set_editable(GtkEntry *self ,gboolean editable);
GtkWidget* gtk_entry_new();
none gtk_spin_button_configure(GtkSpinButton *self ,GtkAdjustment* adjustment,gdouble climb_rate,guint digits);
none gtk_spin_button_set_adjustment(GtkSpinButton *self ,GtkAdjustment* adjustment);
GtkAdjustment* gtk_spin_button_get_adjustment(GtkSpinButton *self );
none gtk_spin_button_set_digits(GtkSpinButton *self ,guint digits);
guint gtk_spin_button_get_digits(GtkSpinButton *self );
none gtk_spin_button_set_increments(GtkSpinButton *self ,gdouble step,gdouble page);
none gtk_spin_button_get_increments(GtkSpinButton *self ,gdouble* step,gdouble* page);
none gtk_spin_button_set_range(GtkSpinButton *self ,gdouble min,gdouble max);
none gtk_spin_button_get_range(GtkSpinButton *self ,gdouble* min,gdouble* max);
gdouble gtk_spin_button_get_value(GtkSpinButton *self );
gint gtk_spin_button_get_value_as_int(GtkSpinButton *self );
none gtk_spin_button_set_value(GtkSpinButton *self ,gdouble value);
none gtk_spin_button_set_update_policy(GtkSpinButton *self ,GtkSpinButtonUpdatePolicy policy);
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy(GtkSpinButton *self );
none gtk_spin_button_set_numeric(GtkSpinButton *self ,gboolean numeric);
gboolean gtk_spin_button_get_numeric(GtkSpinButton *self );
none gtk_spin_button_spin(GtkSpinButton *self ,GtkSpinType direction,gdouble increment);
none gtk_spin_button_set_wrap(GtkSpinButton *self ,gboolean wrap);
gboolean gtk_spin_button_get_wrap(GtkSpinButton *self );
none gtk_spin_button_set_snap_to_ticks(GtkSpinButton *self ,gboolean snap_to_ticks);
gboolean gtk_spin_button_get_snap_to_ticks(GtkSpinButton *self );
none gtk_spin_button_update(GtkSpinButton *self );
GtkWidget* gtk_spin_button_new(GtkAdjustment* adjustment,gdouble climb_rate,guint digits);
none gtk_drawing_area_size(GtkDrawingArea *self ,gint width,gint height);
GtkWidget* gtk_drawing_area_new();
none gtk_curve_reset(GtkCurve *self );
none gtk_curve_set_gamma(GtkCurve *self ,gfloat gamma_);
none gtk_curve_set_range(GtkCurve *self ,gfloat min_x,gfloat max_x,gfloat min_y,gfloat max_y);
none gtk_curve_get_vector(GtkCurve *self ,int veclen,gfloat * vector);
none gtk_curve_set_vector(GtkCurve *self ,int veclen,gfloat * vector);
none gtk_curve_set_curve_type(GtkCurve *self ,GtkCurveType type);
GtkWidget* gtk_curve_new();
none gtk_container_set_border_width(GtkContainer *self ,guint border_width);
guint gtk_container_get_border_width(GtkContainer *self );
none gtk_container_add(GtkContainer *self ,GtkWidget* widget);
none gtk_container_remove(GtkContainer *self ,GtkWidget* widget);
none gtk_container_set_resize_mode(GtkContainer *self ,GtkResizeMode resize_mode);
GtkResizeMode gtk_container_get_resize_mode(GtkContainer *self );
none gtk_container_check_resize(GtkContainer *self );
none gtk_container_foreach(GtkContainer *self ,GtkCallback callback,gpointer callback_data);
none gtk_container_foreach_full(GtkContainer *self ,GtkCallback callback,GtkCallbackMarshal marshal,gpointer callback_data,GtkDestroyNotify notify);
GList* gtk_container_get_children(GtkContainer *self );
none gtk_container_propagate_expose(GtkContainer *self ,GtkWidget* child,GdkEventExpose* event);
none gtk_container_set_focus_chain(GtkContainer *self ,GList* focusable_widgets);
gboolean gtk_container_get_focus_chain(GtkContainer *self ,GList** focusable_widgets);
none gtk_container_unset_focus_chain(GtkContainer *self );
none gtk_container_set_reallocate_redraws(GtkContainer *self ,gboolean needs_redraws);
none gtk_container_set_focus_child(GtkContainer *self ,GtkWidget* child);
none gtk_container_set_focus_vadjustment(GtkContainer *self ,GtkAdjustment* adjustment);
GtkAdjustment* gtk_container_get_focus_vadjustment(GtkContainer *self );
none gtk_container_set_focus_hadjustment(GtkContainer *self ,GtkAdjustment* adjustment);
GtkAdjustment* gtk_container_get_focus_hadjustment(GtkContainer *self );
none gtk_container_resize_children(GtkContainer *self );
GType gtk_container_child_type(GtkContainer *self );
none gtk_container_add_with_properties(GtkContainer *self ,GtkWidget* widget,const gchar* first_prop_name);
none gtk_container_child_set(GtkContainer *self ,GtkWidget* child,const gchar* first_prop_name);
none gtk_container_child_get(GtkContainer *self ,GtkWidget* child,const gchar* first_prop_name);
none gtk_container_child_set_valist(GtkContainer *self ,GtkWidget* child,const gchar* first_property_name,va_list var_args);
none gtk_container_child_get_valist(GtkContainer *self ,GtkWidget* child,const gchar* first_property_name,va_list var_args);
none gtk_container_child_set_property(GtkContainer *self ,GtkWidget* child,const gchar* property_name,const GValue* value);
none gtk_container_child_get_property(GtkContainer *self ,GtkWidget* child,const gchar* property_name,GValue* value);
none gtk_container_forall(GtkContainer *self ,GtkCallback callback,gpointer callback_data);
none gtk_clist_set_hadjustment(GtkCList *self ,GtkAdjustment* adjustment);
none gtk_clist_set_vadjustment(GtkCList *self ,GtkAdjustment* adjustment);
GtkAdjustment* gtk_clist_get_hadjustment(GtkCList *self );
GtkAdjustment* gtk_clist_get_vadjustment(GtkCList *self );
none gtk_clist_set_shadow_type(GtkCList *self ,GtkShadowType type);
none gtk_clist_set_selection_mode(GtkCList *self ,GtkSelectionMode mode);
none gtk_clist_set_reorderable(GtkCList *self ,gboolean reorderable);
none gtk_clist_set_use_drag_icons(GtkCList *self ,gboolean use_icons);
none gtk_clist_set_button_actions(GtkCList *self ,guint button,guint8 button_actions);
none gtk_clist_freeze(GtkCList *self );
none gtk_clist_thaw(GtkCList *self );
none gtk_clist_column_titles_show(GtkCList *self );
none gtk_clist_column_titles_hide(GtkCList *self );
none gtk_clist_column_title_active(GtkCList *self ,gint column);
none gtk_clist_column_title_passive(GtkCList *self ,gint column);
none gtk_clist_column_titles_active(GtkCList *self );
none gtk_clist_column_titles_passive(GtkCList *self );
none gtk_clist_set_column_title(GtkCList *self ,gint column,const gchar* title);
gchar* gtk_clist_get_column_title(GtkCList *self ,gint column);
none gtk_clist_set_column_widget(GtkCList *self ,gint column,GtkWidget* widget);
GtkWidget* gtk_clist_get_column_widget(GtkCList *self ,gint column);
none gtk_clist_set_column_justification(GtkCList *self ,gint column,GtkJustification justification);
none gtk_clist_set_column_visibility(GtkCList *self ,gint column,gboolean visible);
none gtk_clist_set_column_resizeable(GtkCList *self ,gint column,gboolean resizeable);
none gtk_clist_set_column_auto_resize(GtkCList *self ,gint column,gboolean auto_resize);
gint gtk_clist_columns_autosize(GtkCList *self );
gint gtk_clist_optimal_column_width(GtkCList *self ,gint column);
none gtk_clist_set_column_width(GtkCList *self ,gint column,gint width);
none gtk_clist_set_column_min_width(GtkCList *self ,gint column,gint min_width);
none gtk_clist_set_column_max_width(GtkCList *self ,gint column,gint max_width);
none gtk_clist_set_row_height(GtkCList *self ,guint height);
none gtk_clist_moveto(GtkCList *self ,gint row,gint column,gfloat row_align,gfloat col_align);
GtkVisibility gtk_clist_row_is_visible(GtkCList *self ,gint row);
GtkCellType gtk_clist_get_cell_type(GtkCList *self ,gint row,gint column);
none gtk_clist_set_text(GtkCList *self ,gint row,gint column,const gchar* text);
gint gtk_clist_get_text(GtkCList *self ,gint row,gint column,gchar** text);
none gtk_clist_set_pixmap(GtkCList *self ,gint row,gint column,GdkPixmap* pixmap,GdkBitmap* mask);
gint gtk_clist_get_pixmap(GtkCList *self ,gint row,gint column,GdkPixmap** pixmap,GdkBitmap** mask);
none gtk_clist_set_pixtext(GtkCList *self ,gint row,gint column,const gchar* text,guint8 spacing,GdkPixmap* pixmap,GdkBitmap* mask);
gint gtk_clist_get_pixtext(GtkCList *self ,gint row,gint column,gchar** text,guint8* spacing,GdkPixmap** pixmap,GdkBitmap** mask);
none gtk_clist_set_foreground(GtkCList *self ,gint row,const GdkColor* color);
none gtk_clist_set_background(GtkCList *self ,gint row,const GdkColor* color);
none gtk_clist_set_cell_style(GtkCList *self ,gint row,gint column,GtkStyle* style);
GtkStyle* gtk_clist_get_cell_style(GtkCList *self ,gint row,gint column);
none gtk_clist_set_row_style(GtkCList *self ,gint row,GtkStyle* style);
GtkStyle* gtk_clist_get_row_style(GtkCList *self ,gint row);
none gtk_clist_set_shift(GtkCList *self ,gint row,gint column,gint vertical,gint horizontal);
none gtk_clist_set_selectable(GtkCList *self ,gint row,gboolean selectable);
gboolean gtk_clist_get_selectable(GtkCList *self ,gint row);
gint gtk_clist_prepend(GtkCList *self ,gchar* * text);
gint gtk_clist_append(GtkCList *self ,gchar* * text);
gint gtk_clist_insert(GtkCList *self ,gint row,gchar* * text);
none gtk_clist_remove(GtkCList *self ,gint row);
none gtk_clist_set_row_data(GtkCList *self ,gint row,gpointer data);
none gtk_clist_set_row_data_full(GtkCList *self ,gint row,gpointer data,GtkDestroyNotify destroy);
gpointer gtk_clist_get_row_data(GtkCList *self ,gint row);
gint gtk_clist_find_row_from_data(GtkCList *self ,gpointer data);
none gtk_clist_select_row(GtkCList *self ,gint row,gint column);
none gtk_clist_unselect_row(GtkCList *self ,gint row,gint column);
none gtk_clist_undo_selection(GtkCList *self );
none gtk_clist_clear(GtkCList *self );
gint gtk_clist_get_selection_info(GtkCList *self ,gint x,gint y,gint* row,gint* column);
none gtk_clist_select_all(GtkCList *self );
none gtk_clist_unselect_all(GtkCList *self );
none gtk_clist_swap_rows(GtkCList *self ,gint row1,gint row2);
none gtk_clist_row_move(GtkCList *self ,gint source_row,gint dest_row);
none gtk_clist_set_compare_func(GtkCList *self ,GtkCListCompareFunc cmp_func);
none gtk_clist_set_sort_column(GtkCList *self ,gint column);
none gtk_clist_set_sort_type(GtkCList *self ,GtkSortType sort_type);
none gtk_clist_sort(GtkCList *self );
none gtk_clist_set_auto_sort(GtkCList *self ,gboolean auto_sort);
GtkCTreeNode* gtk_ctree_insert_node(GtkCTree *self ,GtkCTreeNode* parent,GtkCTreeNode* sibling,gchar* * text,guint8 spacing,GdkPixmap* pixmap_closed,GdkBitmap* mask_closed,GdkPixmap* pixmap_opened,GdkBitmap* mask_opened,gboolean is_leaf,gboolean expanded);
none gtk_ctree_remove_node(GtkCTree *self ,GtkCTreeNode* node);
GtkCTreeNode* gtk_ctree_insert_gnode(GtkCTree *self ,GtkCTreeNode* parent,GtkCTreeNode* sibling,GNode* gnode,GtkCTreeGNodeFunc func,gpointer data);
GNode* gtk_ctree_export_to_gnode(GtkCTree *self ,GNode* parent,GNode* sibling,GtkCTreeNode* node,GtkCTreeGNodeFunc func,gpointer data);
none gtk_ctree_post_recursive(GtkCTree *self ,GtkCTreeNode* node,GtkCTreeFunc func,gpointer data);
none gtk_ctree_post_recursive_to_depth(GtkCTree *self ,GtkCTreeNode* node,gint depth,GtkCTreeFunc func,gpointer data);
none gtk_ctree_pre_recursive(GtkCTree *self ,GtkCTreeNode* node,GtkCTreeFunc func,gpointer data);
none gtk_ctree_pre_recursive_to_depth(GtkCTree *self ,GtkCTreeNode* node,gint depth,GtkCTreeFunc func,gpointer data);
gboolean gtk_ctree_is_viewable(GtkCTree *self ,GtkCTreeNode* node);
GtkCTreeNode* gtk_ctree_last(GtkCTree *self ,GtkCTreeNode* node);
GtkCTreeNode* gtk_ctree_find_node_ptr(GtkCTree *self ,GtkCTreeRow* ctree_row);
GtkCTreeNode* gtk_ctree_node_nth(GtkCTree *self ,guint row);
gboolean gtk_ctree_find(GtkCTree *self ,GtkCTreeNode* node,GtkCTreeNode* child);
gboolean gtk_ctree_is_ancestor(GtkCTree *self ,GtkCTreeNode* node,GtkCTreeNode* child);
GtkCTreeNode* gtk_ctree_find_by_row_data(GtkCTree *self ,GtkCTreeNode* node,gpointer data);
GList* gtk_ctree_find_all_by_row_data(GtkCTree *self ,GtkCTreeNode* node,gpointer data);
GtkCTreeNode* gtk_ctree_find_by_row_data_custom(GtkCTree *self ,GtkCTreeNode* node,gpointer data,GCompareFunc func);
GList* gtk_ctree_find_all_by_row_data_custom(GtkCTree *self ,GtkCTreeNode* node,gpointer data,GCompareFunc func);
gboolean gtk_ctree_is_hot_spot(GtkCTree *self ,gint x,gint y);
none gtk_ctree_move(GtkCTree *self ,GtkCTreeNode* node,GtkCTreeNode* new_parent,GtkCTreeNode* new_sibling);
none gtk_ctree_expand(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_expand_recursive(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_expand_to_depth(GtkCTree *self ,GtkCTreeNode* node,gint depth);
none gtk_ctree_collapse(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_collapse_recursive(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_collapse_to_depth(GtkCTree *self ,GtkCTreeNode* node,gint depth);
none gtk_ctree_toggle_expansion(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_toggle_expansion_recursive(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_select(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_select_recursive(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_unselect(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_unselect_recursive(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_real_select_recursive(GtkCTree *self ,GtkCTreeNode* node,gint state);
none gtk_ctree_node_set_text(GtkCTree *self ,GtkCTreeNode* node,gint column,const gchar* text);
none gtk_ctree_node_set_pixmap(GtkCTree *self ,GtkCTreeNode* node,gint column,GdkPixmap* pixmap,GdkBitmap* mask);
none gtk_ctree_node_set_pixtext(GtkCTree *self ,GtkCTreeNode* node,gint column,const gchar* text,guint8 spacing,GdkPixmap* pixmap,GdkBitmap* mask);
none gtk_ctree_set_node_info(GtkCTree *self ,GtkCTreeNode* node,const gchar* text,guint8 spacing,GdkPixmap* pixmap_closed,GdkBitmap* mask_closed,GdkPixmap* pixmap_opened,GdkBitmap* mask_opened,gboolean is_leaf,gboolean expanded);
none gtk_ctree_node_set_shift(GtkCTree *self ,GtkCTreeNode* node,gint column,gint vertical,gint horizontal);
none gtk_ctree_node_set_selectable(GtkCTree *self ,GtkCTreeNode* node,gboolean selectable);
gboolean gtk_ctree_node_get_selectable(GtkCTree *self ,GtkCTreeNode* node);
GtkCellType gtk_ctree_node_get_cell_type(GtkCTree *self ,GtkCTreeNode* node,gint column);
gboolean gtk_ctree_node_get_text(GtkCTree *self ,GtkCTreeNode* node,gint column,gchar** text);
gboolean gtk_ctree_node_get_pixmap(GtkCTree *self ,GtkCTreeNode* node,gint column,GdkPixmap** pixmap,GdkBitmap** mask);
gboolean gtk_ctree_node_get_pixtext(GtkCTree *self ,GtkCTreeNode* node,gint column,gchar** text,guint8* spacing,GdkPixmap** pixmap,GdkBitmap** mask);
gboolean gtk_ctree_get_node_info(GtkCTree *self ,GtkCTreeNode* node,gchar** text,guint8* spacing,GdkPixmap** pixmap_closed,GdkBitmap** mask_closed,GdkPixmap** pixmap_opened,GdkBitmap** mask_opened,gboolean* is_leaf,gboolean* expanded);
none gtk_ctree_node_set_row_style(GtkCTree *self ,GtkCTreeNode* node,GtkStyle* style);
GtkStyle* gtk_ctree_node_get_row_style(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_node_set_cell_style(GtkCTree *self ,GtkCTreeNode* node,gint column,GtkStyle* style);
GtkStyle* gtk_ctree_node_get_cell_style(GtkCTree *self ,GtkCTreeNode* node,gint column);
none gtk_ctree_node_set_foreground(GtkCTree *self ,GtkCTreeNode* node,const GdkColor* color);
none gtk_ctree_node_set_background(GtkCTree *self ,GtkCTreeNode* node,const GdkColor* color);
none gtk_ctree_node_set_row_data(GtkCTree *self ,GtkCTreeNode* node,gpointer data);
none gtk_ctree_node_set_row_data_full(GtkCTree *self ,GtkCTreeNode* node,gpointer data,GtkDestroyNotify destroy);
gpointer gtk_ctree_node_get_row_data(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_node_moveto(GtkCTree *self ,GtkCTreeNode* node,gint column,gfloat row_align,gfloat col_align);
GtkVisibility gtk_ctree_node_is_visible(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_set_indent(GtkCTree *self ,gint indent);
none gtk_ctree_set_spacing(GtkCTree *self ,gint spacing);
none gtk_ctree_set_show_stub(GtkCTree *self ,gboolean show_stub);
none gtk_ctree_set_line_style(GtkCTree *self ,GtkCTreeLineStyle line_style);
none gtk_ctree_set_expander_style(GtkCTree *self ,GtkCTreeExpanderStyle expander_style);
none gtk_ctree_set_drag_compare_func(GtkCTree *self ,GtkCTreeCompareDragFunc cmp_func);
none gtk_ctree_sort_node(GtkCTree *self ,GtkCTreeNode* node);
none gtk_ctree_sort_recursive(GtkCTree *self ,GtkCTreeNode* node);
none gtk_box_pack_start(GtkBox *self ,GtkWidget* child,gboolean expand,gboolean fill,guint padding);
none gtk_box_pack_end(GtkBox *self ,GtkWidget* child,gboolean expand,gboolean fill,guint padding);
none gtk_box_pack_start_defaults(GtkBox *self ,GtkWidget* widget);
none gtk_box_pack_end_defaults(GtkBox *self ,GtkWidget* widget);
none gtk_box_set_homogeneous(GtkBox *self ,gboolean homogeneous);
gboolean gtk_box_get_homogeneous(GtkBox *self );
none gtk_box_set_spacing(GtkBox *self ,gint spacing);
gint gtk_box_get_spacing(GtkBox *self );
none gtk_box_reorder_child(GtkBox *self ,GtkWidget* child,gint position);
none gtk_box_query_child_packing(GtkBox *self ,GtkWidget* child,gboolean* expand,gboolean* fill,guint* padding,GtkPackType* pack_type);
none gtk_box_set_child_packing(GtkBox *self ,GtkWidget* child,gboolean expand,gboolean fill,guint padding,GtkPackType pack_type);
GtkButtonBoxStyle gtk_button_box_get_layout(GtkButtonBox *self );
none gtk_button_box_set_layout(GtkButtonBox *self ,GtkButtonBoxStyle layout_style);
gboolean gtk_button_box_get_child_secondary(GtkButtonBox *self ,GtkWidget* child);
none gtk_button_box_set_child_secondary(GtkButtonBox *self ,GtkWidget* child,gboolean is_secondary);
none gtk_button_box_set_child_size(GtkButtonBox *self ,gint min_width,gint min_height);
none gtk_button_box_set_child_ipadding(GtkButtonBox *self ,gint ipad_x,gint ipad_y);
none gtk_button_box_get_child_size(GtkButtonBox *self ,gint* min_width,gint* min_height);
none gtk_button_box_get_child_ipadding(GtkButtonBox *self ,gint* ipad_x,gint* ipad_y);
guint gtk_statusbar_get_context_id(GtkStatusbar *self ,const gchar* context_description);
guint gtk_statusbar_push(GtkStatusbar *self ,guint context_id,const gchar* text);
none gtk_statusbar_pop(GtkStatusbar *self ,guint context_id);
none gtk_statusbar_remove(GtkStatusbar *self ,guint context_id,guint message_id);
none gtk_statusbar_set_has_resize_grip(GtkStatusbar *self ,gboolean setting);
gboolean gtk_statusbar_get_has_resize_grip(GtkStatusbar *self );
GtkWidget* gtk_statusbar_new();
const gchar* gtk_file_chooser_button_get_title(GtkFileChooserButton *self );
none gtk_file_chooser_button_set_title(GtkFileChooserButton *self ,const gchar* title);
gint gtk_file_chooser_button_get_width_chars(GtkFileChooserButton *self );
none gtk_file_chooser_button_set_width_chars(GtkFileChooserButton *self ,gint n_chars);
GtkWidget* gtk_file_chooser_button_new(const gchar* title,GtkFileChooserAction action);
none gtk_combo_set_value_in_list(GtkCombo *self ,gboolean val,gboolean ok_if_empty);
none gtk_combo_set_use_arrows(GtkCombo *self ,gboolean val);
none gtk_combo_set_use_arrows_always(GtkCombo *self ,gboolean val);
none gtk_combo_set_case_sensitive(GtkCombo *self ,gboolean val);
none gtk_combo_set_item_string(GtkCombo *self ,GtkItem* item,const gchar* item_value);
none gtk_combo_set_popdown_strings(GtkCombo *self ,GList* strings);
none gtk_combo_disable_activate(GtkCombo *self );
GtkWidget* gtk_combo_new();
GtkWidget* gtk_gamma_curve_new();
gchar* gtk_font_selection_get_font_name(GtkFontSelection *self );
GdkFont* gtk_font_selection_get_font(GtkFontSelection *self );
gboolean gtk_font_selection_set_font_name(GtkFontSelection *self ,const gchar* fontname);
const gchar* gtk_font_selection_get_preview_text(GtkFontSelection *self );
none gtk_font_selection_set_preview_text(GtkFontSelection *self ,const gchar* text);
GtkWidget* gtk_font_selection_new();
GtkWidget* gtk_file_chooser_widget_new(GtkFileChooserAction action);
gboolean gtk_color_selection_get_has_opacity_control(GtkColorSelection *self );
none gtk_color_selection_set_has_opacity_control(GtkColorSelection *self ,gboolean has_opacity);
gboolean gtk_color_selection_get_has_palette(GtkColorSelection *self );
none gtk_color_selection_set_has_palette(GtkColorSelection *self ,gboolean has_palette);
none gtk_color_selection_set_current_color(GtkColorSelection *self ,const GdkColor* color);
none gtk_color_selection_set_current_alpha(GtkColorSelection *self ,guint16 alpha);
none gtk_color_selection_get_current_color(GtkColorSelection *self ,GdkColor* color);
guint16 gtk_color_selection_get_current_alpha(GtkColorSelection *self );
none gtk_color_selection_set_previous_color(GtkColorSelection *self ,const GdkColor* color);
none gtk_color_selection_set_previous_alpha(GtkColorSelection *self ,guint16 alpha);
none gtk_color_selection_get_previous_color(GtkColorSelection *self ,GdkColor* color);
guint16 gtk_color_selection_get_previous_alpha(GtkColorSelection *self );
gboolean gtk_color_selection_is_adjusting(GtkColorSelection *self );
none gtk_color_selection_set_color(GtkColorSelection *self ,gdouble* color);
none gtk_color_selection_get_color(GtkColorSelection *self ,gdouble* color);
none gtk_color_selection_set_update_policy(GtkColorSelection *self ,GtkUpdateType policy);
GtkWidget* gtk_color_selection_new();
GtkWidget* gtk_bin_get_child(GtkBin *self );
none gtk_alignment_set(GtkAlignment *self ,gfloat xalign,gfloat yalign,gfloat xscale,gfloat yscale);
none gtk_alignment_set_padding(GtkAlignment *self ,guint padding_top,guint padding_bottom,guint padding_left,guint padding_right);
none gtk_alignment_get_padding(GtkAlignment *self ,guint* padding_top,guint* padding_bottom,guint* padding_left,guint* padding_right);
GtkWidget* gtk_alignment_new(gfloat xalign,gfloat yalign,gfloat xscale,gfloat yscale);
none gtk_button_pressed(GtkButton *self );
none gtk_button_released(GtkButton *self );
none gtk_button_clicked(GtkButton *self );
none gtk_button_enter(GtkButton *self );
none gtk_button_leave(GtkButton *self );
none gtk_button_set_relief(GtkButton *self ,GtkReliefStyle newstyle);
GtkReliefStyle gtk_button_get_relief(GtkButton *self );
none gtk_button_set_label(GtkButton *self ,const gchar* label);
const gchar* gtk_button_get_label(GtkButton *self );
none gtk_button_set_use_underline(GtkButton *self ,gboolean use_underline);
gboolean gtk_button_get_use_underline(GtkButton *self );
none gtk_button_set_use_stock(GtkButton *self ,gboolean use_stock);
gboolean gtk_button_get_use_stock(GtkButton *self );
none gtk_button_set_focus_on_click(GtkButton *self ,gboolean focus_on_click);
gboolean gtk_button_get_focus_on_click(GtkButton *self );
none gtk_button_set_alignment(GtkButton *self ,gfloat xalign,gfloat yalign);
none gtk_button_get_alignment(GtkButton *self ,gfloat* xalign,gfloat* yalign);
none gtk_button_set_image(GtkButton *self ,GtkWidget* image);
GtkWidget* gtk_button_get_image(GtkButton *self );
GtkWidget* gtk_button_new();
none gtk_color_button_set_color(GtkColorButton *self ,const GdkColor* color);
none gtk_color_button_set_alpha(GtkColorButton *self ,guint16 alpha);
none gtk_color_button_get_color(GtkColorButton *self ,GdkColor* color);
guint16 gtk_color_button_get_alpha(GtkColorButton *self );
none gtk_color_button_set_use_alpha(GtkColorButton *self ,gboolean use_alpha);
gboolean gtk_color_button_get_use_alpha(GtkColorButton *self );
none gtk_color_button_set_title(GtkColorButton *self ,const gchar* title);
const gchar* gtk_color_button_get_title(GtkColorButton *self );
GtkWidget* gtk_color_button_new();
const gchar* gtk_font_button_get_title(GtkFontButton *self );
none gtk_font_button_set_title(GtkFontButton *self ,const gchar* title);
gboolean gtk_font_button_get_use_font(GtkFontButton *self );
none gtk_font_button_set_use_font(GtkFontButton *self ,gboolean use_font);
gboolean gtk_font_button_get_use_size(GtkFontButton *self );
none gtk_font_button_set_use_size(GtkFontButton *self ,gboolean use_size);
const gchar* gtk_font_button_get_font_name(GtkFontButton *self );
gboolean gtk_font_button_set_font_name(GtkFontButton *self ,const gchar* fontname);
gboolean gtk_font_button_get_show_style(GtkFontButton *self );
none gtk_font_button_set_show_style(GtkFontButton *self ,gboolean show_style);
gboolean gtk_font_button_get_show_size(GtkFontButton *self );
none gtk_font_button_set_show_size(GtkFontButton *self ,gboolean show_size);
GtkWidget* gtk_font_button_new();
GtkWidget* gtk_option_menu_get_menu(GtkOptionMenu *self );
none gtk_option_menu_set_menu(GtkOptionMenu *self ,GtkWidget* menu);
none gtk_option_menu_remove_menu(GtkOptionMenu *self );
gint gtk_option_menu_get_history(GtkOptionMenu *self );
none gtk_option_menu_set_history(GtkOptionMenu *self ,guint index_);
GtkWidget* gtk_option_menu_new();
none gtk_toggle_button_set_mode(GtkToggleButton *self ,gboolean draw_indicator);
gboolean gtk_toggle_button_get_mode(GtkToggleButton *self );
none gtk_toggle_button_set_active(GtkToggleButton *self ,gboolean is_active);
gboolean gtk_toggle_button_get_active(GtkToggleButton *self );
none gtk_toggle_button_toggled(GtkToggleButton *self );
none gtk_toggle_button_set_inconsistent(GtkToggleButton *self ,gboolean setting);
gboolean gtk_toggle_button_get_inconsistent(GtkToggleButton *self );
GtkWidget* gtk_toggle_button_new();
GtkWidget* gtk_check_button_new();
GtkWidget* gtk_radio_button_new_from_widget(GtkRadioButton *self );
GtkWidget* gtk_radio_button_new_with_label_from_widget(GtkRadioButton *self ,const gchar* label);
GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton *self ,const gchar* label);
GSList* gtk_radio_button_get_group(GtkRadioButton *self );
none gtk_radio_button_set_group(GtkRadioButton *self ,GSList* group);
GtkWidget* gtk_radio_button_new(GSList* group);
none gtk_handle_box_set_shadow_type(GtkHandleBox *self ,GtkShadowType type);
GtkShadowType gtk_handle_box_get_shadow_type(GtkHandleBox *self );
none gtk_handle_box_set_handle_position(GtkHandleBox *self ,GtkPositionType position);
GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *self );
none gtk_handle_box_set_snap_edge(GtkHandleBox *self ,GtkPositionType edge);
GtkPositionType gtk_handle_box_get_snap_edge(GtkHandleBox *self );
GtkWidget* gtk_handle_box_new();
gint gtk_combo_box_get_wrap_width(GtkComboBox *self );
none gtk_combo_box_set_wrap_width(GtkComboBox *self ,gint width);
gint gtk_combo_box_get_row_span_column(GtkComboBox *self );
none gtk_combo_box_set_row_span_column(GtkComboBox *self ,gint row_span);
gint gtk_combo_box_get_column_span_column(GtkComboBox *self );
none gtk_combo_box_set_column_span_column(GtkComboBox *self ,gint column_span);
gboolean gtk_combo_box_get_add_tearoffs(GtkComboBox *self );
none gtk_combo_box_set_add_tearoffs(GtkComboBox *self ,gboolean add_tearoffs);
gboolean gtk_combo_box_get_focus_on_click(GtkComboBox *self );
none gtk_combo_box_set_focus_on_click(GtkComboBox *self ,gboolean focus_on_click);
gint gtk_combo_box_get_active(GtkComboBox *self );
none gtk_combo_box_set_active(GtkComboBox *self ,gint index_);
gboolean gtk_combo_box_get_active_iter(GtkComboBox *self ,GtkTreeIter* iter);
none gtk_combo_box_set_active_iter(GtkComboBox *self ,GtkTreeIter* iter);
none gtk_combo_box_set_model(GtkComboBox *self ,GtkTreeModel* model);
GtkTreeModel* gtk_combo_box_get_model(GtkComboBox *self );
GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func(GtkComboBox *self );
none gtk_combo_box_set_row_separator_func(GtkComboBox *self ,GtkTreeViewRowSeparatorFunc func,gpointer data,GtkDestroyNotify destroy);
none gtk_combo_box_append_text(GtkComboBox *self ,const gchar* text);
none gtk_combo_box_insert_text(GtkComboBox *self ,gint position,const gchar* text);
none gtk_combo_box_prepend_text(GtkComboBox *self ,const gchar* text);
none gtk_combo_box_remove_text(GtkComboBox *self ,gint position);
gchar* gtk_combo_box_get_active_text(GtkComboBox *self );
none gtk_combo_box_popup(GtkComboBox *self );
none gtk_combo_box_popdown(GtkComboBox *self );
AtkObject* gtk_combo_box_get_popup_accessible(GtkComboBox *self );
GtkWidget* gtk_combo_box_new();
none gtk_combo_box_entry_set_text_column(GtkComboBoxEntry *self ,gint text_column);
gint gtk_combo_box_entry_get_text_column(GtkComboBoxEntry *self );
GtkWidget* gtk_combo_box_entry_new();
gboolean gtk_event_box_get_visible_window(GtkEventBox *self );
none gtk_event_box_set_visible_window(GtkEventBox *self ,gboolean visible_window);
gboolean gtk_event_box_get_above_child(GtkEventBox *self );
none gtk_event_box_set_above_child(GtkEventBox *self ,gboolean above_child);
GtkWidget* gtk_event_box_new();
none gtk_expander_set_expanded(GtkExpander *self ,gboolean expanded);
gboolean gtk_expander_get_expanded(GtkExpander *self );
none gtk_expander_set_spacing(GtkExpander *self ,gint spacing);
gint gtk_expander_get_spacing(GtkExpander *self );
none gtk_expander_set_label(GtkExpander *self ,const gchar* label);
const gchar* gtk_expander_get_label(GtkExpander *self );
none gtk_expander_set_use_underline(GtkExpander *self ,gboolean use_underline);
gboolean gtk_expander_get_use_underline(GtkExpander *self );
none gtk_expander_set_use_markup(GtkExpander *self ,gboolean use_markup);
gboolean gtk_expander_get_use_markup(GtkExpander *self );
none gtk_expander_set_label_widget(GtkExpander *self ,GtkWidget* label_widget);
GtkWidget* gtk_expander_get_label_widget(GtkExpander *self );
GtkWidget* gtk_expander_new(const gchar* label);
none gtk_frame_set_label(GtkFrame *self ,const gchar* label);
const gchar* gtk_frame_get_label(GtkFrame *self );
none gtk_frame_set_label_widget(GtkFrame *self ,GtkWidget* label_widget);
GtkWidget* gtk_frame_get_label_widget(GtkFrame *self );
none gtk_frame_set_label_align(GtkFrame *self ,gfloat xalign,gfloat yalign);
none gtk_frame_get_label_align(GtkFrame *self ,gfloat* xalign,gfloat* yalign);
none gtk_frame_set_shadow_type(GtkFrame *self ,GtkShadowType type);
GtkShadowType gtk_frame_get_shadow_type(GtkFrame *self );
GtkWidget* gtk_frame_new(const gchar* label);
none gtk_aspect_frame_set(GtkAspectFrame *self ,gfloat xalign,gfloat yalign,gfloat ratio,gboolean obey_child);
GtkWidget* gtk_aspect_frame_new(const gchar* label,gfloat xalign,gfloat yalign,gfloat ratio,gboolean obey_child);
none gtk_item_select(GtkItem *self );
none gtk_item_deselect(GtkItem *self );
none gtk_item_toggle(GtkItem *self );
none gtk_list_item_select(GtkListItem *self );
none gtk_list_item_deselect(GtkListItem *self );
GtkWidget* gtk_list_item_new();
none gtk_menu_item_set_submenu(GtkMenuItem *self ,GtkWidget* submenu);
GtkWidget* gtk_menu_item_get_submenu(GtkMenuItem *self );
none gtk_menu_item_remove_submenu(GtkMenuItem *self );
none gtk_menu_item_select(GtkMenuItem *self );
none gtk_menu_item_deselect(GtkMenuItem *self );
none gtk_menu_item_activate(GtkMenuItem *self );
none gtk_menu_item_toggle_size_request(GtkMenuItem *self ,gint* requisition);
none gtk_menu_item_toggle_size_allocate(GtkMenuItem *self ,gint allocation);
none gtk_menu_item_set_right_justified(GtkMenuItem *self ,gboolean right_justified);
gboolean gtk_menu_item_get_right_justified(GtkMenuItem *self );
none gtk_menu_item_set_accel_path(GtkMenuItem *self ,const gchar* accel_path);
GtkWidget* gtk_menu_item_new();
GtkWidget* gtk_separator_menu_item_new();
GtkWidget* gtk_tearoff_menu_item_new();
none gtk_image_menu_item_set_image(GtkImageMenuItem *self ,GtkWidget* image);
GtkWidget* gtk_image_menu_item_get_image(GtkImageMenuItem *self );
GtkWidget* gtk_image_menu_item_new();
none gtk_check_menu_item_set_active(GtkCheckMenuItem *self ,gboolean is_active);
gboolean gtk_check_menu_item_get_active(GtkCheckMenuItem *self );
none gtk_check_menu_item_toggled(GtkCheckMenuItem *self );
none gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem *self ,gboolean setting);
gboolean gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem *self );
none gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem *self ,gboolean draw_as_radio);
gboolean gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem *self );
none gtk_check_menu_item_set_show_toggle(GtkCheckMenuItem *self ,gboolean always);
GtkWidget* gtk_check_menu_item_new();
GtkWidget* gtk_radio_menu_item_new_from_widget(GtkRadioMenuItem *self );
GtkWidget* gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem *self ,const gchar* label);
GtkWidget* gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem *self ,const gchar* label);
GSList* gtk_radio_menu_item_get_group(GtkRadioMenuItem *self );
none gtk_radio_menu_item_set_group(GtkRadioMenuItem *self ,GSList* group);
GtkWidget* gtk_radio_menu_item_new(GSList* group);
none gtk_tree_item_set_subtree(GtkTreeItem *self ,GtkWidget* subtree);
none gtk_tree_item_remove_subtree(GtkTreeItem *self );
none gtk_tree_item_select(GtkTreeItem *self );
none gtk_tree_item_deselect(GtkTreeItem *self );
none gtk_tree_item_expand(GtkTreeItem *self );
none gtk_tree_item_collapse(GtkTreeItem *self );
GtkWidget* gtk_tree_item_new();
none gtk_scrolled_window_set_hadjustment(GtkScrolledWindow *self ,GtkAdjustment* hadjustment);
none gtk_scrolled_window_set_vadjustment(GtkScrolledWindow *self ,GtkAdjustment* vadjustment);
GtkAdjustment* gtk_scrolled_window_get_hadjustment(GtkScrolledWindow *self );
GtkAdjustment* gtk_scrolled_window_get_vadjustment(GtkScrolledWindow *self );
GtkWidget* gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow *self );
GtkWidget* gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow *self );
none gtk_scrolled_window_set_policy(GtkScrolledWindow *self ,GtkPolicyType hscrollbar_policy,GtkPolicyType vscrollbar_policy);
none gtk_scrolled_window_get_policy(GtkScrolledWindow *self ,GtkPolicyType* hscrollbar_policy,GtkPolicyType* vscrollbar_policy);
none gtk_scrolled_window_set_placement(GtkScrolledWindow *self ,GtkCornerType window_placement);
GtkCornerType gtk_scrolled_window_get_placement(GtkScrolledWindow *self );
none gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *self ,GtkShadowType type);
GtkShadowType gtk_scrolled_window_get_shadow_type(GtkScrolledWindow *self );
none gtk_scrolled_window_add_with_viewport(GtkScrolledWindow *self ,GtkWidget* child);
GtkWidget* gtk_scrolled_window_new(GtkAdjustment* hadjustment,GtkAdjustment* vadjustment);
none gtk_tool_item_set_homogeneous(GtkToolItem *self ,gboolean homogeneous);
gboolean gtk_tool_item_get_homogeneous(GtkToolItem *self );
none gtk_tool_item_set_expand(GtkToolItem *self ,gboolean expand);
gboolean gtk_tool_item_get_expand(GtkToolItem *self );
none gtk_tool_item_set_tooltip(GtkToolItem *self ,GtkTooltips* tooltips,const gchar* tip_text,const gchar* tip_private);
none gtk_tool_item_set_use_drag_window(GtkToolItem *self ,gboolean use_drag_window);
gboolean gtk_tool_item_get_use_drag_window(GtkToolItem *self );
none gtk_tool_item_set_visible_horizontal(GtkToolItem *self ,gboolean visible_horizontal);
gboolean gtk_tool_item_get_visible_horizontal(GtkToolItem *self );
none gtk_tool_item_set_visible_vertical(GtkToolItem *self ,gboolean visible_vertical);
gboolean gtk_tool_item_get_visible_vertical(GtkToolItem *self );
gboolean gtk_tool_item_get_is_important(GtkToolItem *self );
none gtk_tool_item_set_is_important(GtkToolItem *self ,gboolean is_important);
GtkIconSize gtk_tool_item_get_icon_size(GtkToolItem *self );
GtkOrientation gtk_tool_item_get_orientation(GtkToolItem *self );
GtkToolbarStyle gtk_tool_item_get_toolbar_style(GtkToolItem *self );
GtkReliefStyle gtk_tool_item_get_relief_style(GtkToolItem *self );
GtkWidget* gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem *self );
GtkWidget* gtk_tool_item_get_proxy_menu_item(GtkToolItem *self ,const gchar* menu_item_id);
none gtk_tool_item_set_proxy_menu_item(GtkToolItem *self ,const gchar* menu_item_id,GtkWidget* menu_item);
none gtk_tool_item_rebuild_menu(GtkToolItem *self );
GtkToolItem* gtk_tool_item_new();
none gtk_tool_button_set_label(GtkToolButton *self ,const gchar* label);
const gchar* gtk_tool_button_get_label(GtkToolButton *self );
none gtk_tool_button_set_use_underline(GtkToolButton *self ,gboolean use_underline);
gboolean gtk_tool_button_get_use_underline(GtkToolButton *self );
none gtk_tool_button_set_stock_id(GtkToolButton *self ,const gchar* stock_id);
const gchar* gtk_tool_button_get_stock_id(GtkToolButton *self );
none gtk_tool_button_set_icon_name(GtkToolButton *self ,const gchar* icon_name);
const gchar* gtk_tool_button_get_icon_name(GtkToolButton *self );
none gtk_tool_button_set_icon_widget(GtkToolButton *self ,GtkWidget* icon_widget);
GtkWidget* gtk_tool_button_get_icon_widget(GtkToolButton *self );
none gtk_tool_button_set_label_widget(GtkToolButton *self ,GtkWidget* label_widget);
GtkWidget* gtk_tool_button_get_label_widget(GtkToolButton *self );
GtkToolItem* gtk_tool_button_new(GtkWidget* icon_widget,const gchar* label);
none gtk_toggle_tool_button_set_active(GtkToggleToolButton *self ,gboolean is_active);
gboolean gtk_toggle_tool_button_get_active(GtkToggleToolButton *self );
GtkToolItem* gtk_toggle_tool_button_new();
GtkToolItem* gtk_radio_tool_button_new_from_widget(GtkRadioToolButton *self );
GtkToolItem* gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton *self ,const gchar* stock_id);
GSList* gtk_radio_tool_button_get_group(GtkRadioToolButton *self );
none gtk_radio_tool_button_set_group(GtkRadioToolButton *self ,GSList* group);
GtkToolItem* gtk_radio_tool_button_new(GSList* group);
none gtk_menu_tool_button_set_menu(GtkMenuToolButton *self ,GtkWidget* menu);
GtkWidget* gtk_menu_tool_button_get_menu(GtkMenuToolButton *self );
none gtk_menu_tool_button_set_arrow_tooltip(GtkMenuToolButton *self ,GtkTooltips* tooltips,const gchar* tip_text,const gchar* tip_private);
GtkToolItem* gtk_menu_tool_button_new(GtkWidget* icon_widget,const gchar* label);
gboolean gtk_separator_tool_item_get_draw(GtkSeparatorToolItem *self );
none gtk_separator_tool_item_set_draw(GtkSeparatorToolItem *self ,gboolean draw);
GtkToolItem* gtk_separator_tool_item_new();
GtkAdjustment* gtk_viewport_get_hadjustment(GtkViewport *self );
GtkAdjustment* gtk_viewport_get_vadjustment(GtkViewport *self );
none gtk_viewport_set_hadjustment(GtkViewport *self ,GtkAdjustment* adjustment);
none gtk_viewport_set_vadjustment(GtkViewport *self ,GtkAdjustment* adjustment);
none gtk_viewport_set_shadow_type(GtkViewport *self ,GtkShadowType type);
GtkShadowType gtk_viewport_get_shadow_type(GtkViewport *self );
GtkWidget* gtk_viewport_new(GtkAdjustment* hadjustment,GtkAdjustment* vadjustment);
none gtk_window_set_title(GtkWindow *self ,const gchar* title);
const gchar* gtk_window_get_title(GtkWindow *self );
none gtk_window_set_wmclass(GtkWindow *self ,const gchar* wmclass_name,const gchar* wmclass_class);
none gtk_window_set_role(GtkWindow *self ,const gchar* role);
const gchar* gtk_window_get_role(GtkWindow *self );
none gtk_window_add_accel_group(GtkWindow *self ,GtkAccelGroup* accel_group);
none gtk_window_remove_accel_group(GtkWindow *self ,GtkAccelGroup* accel_group);
none gtk_window_set_position(GtkWindow *self ,GtkWindowPosition position);
gboolean gtk_window_activate_focus(GtkWindow *self );
none gtk_window_set_focus(GtkWindow *self ,GtkWidget* focus);
GtkWidget* gtk_window_get_focus(GtkWindow *self );
none gtk_window_set_default(GtkWindow *self ,GtkWidget* default_widget);
gboolean gtk_window_activate_default(GtkWindow *self );
none gtk_window_set_transient_for(GtkWindow *self ,GtkWindow* parent);
GtkWindow* gtk_window_get_transient_for(GtkWindow *self );
none gtk_window_set_type_hint(GtkWindow *self ,GdkWindowTypeHint hint);
GdkWindowTypeHint gtk_window_get_type_hint(GtkWindow *self );
none gtk_window_set_skip_taskbar_hint(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_skip_taskbar_hint(GtkWindow *self );
none gtk_window_set_skip_pager_hint(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_skip_pager_hint(GtkWindow *self );
none gtk_window_set_urgency_hint(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_urgency_hint(GtkWindow *self );
none gtk_window_set_accept_focus(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_accept_focus(GtkWindow *self );
none gtk_window_set_focus_on_map(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_focus_on_map(GtkWindow *self );
none gtk_window_set_destroy_with_parent(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_destroy_with_parent(GtkWindow *self );
none gtk_window_set_resizable(GtkWindow *self ,gboolean resizable);
gboolean gtk_window_get_resizable(GtkWindow *self );
none gtk_window_set_gravity(GtkWindow *self ,GdkGravity gravity);
GdkGravity gtk_window_get_gravity(GtkWindow *self );
none gtk_window_set_geometry_hints(GtkWindow *self ,GtkWidget* geometry_widget,GdkGeometry* geometry,GdkWindowHints geom_mask);
none gtk_window_set_screen(GtkWindow *self ,GdkScreen* screen);
GdkScreen* gtk_window_get_screen(GtkWindow *self );
gboolean gtk_window_is_active(GtkWindow *self );
gboolean gtk_window_has_toplevel_focus(GtkWindow *self );
none gtk_window_set_has_frame(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_has_frame(GtkWindow *self );
none gtk_window_set_frame_dimensions(GtkWindow *self ,gint left,gint top,gint right,gint bottom);
none gtk_window_get_frame_dimensions(GtkWindow *self ,gint* left,gint* top,gint* right,gint* bottom);
none gtk_window_set_decorated(GtkWindow *self ,gboolean setting);
gboolean gtk_window_get_decorated(GtkWindow *self );
none gtk_window_set_icon_list(GtkWindow *self ,GList* list);
GList* gtk_window_get_icon_list(GtkWindow *self );
none gtk_window_set_icon(GtkWindow *self ,GdkPixbuf* icon);
none gtk_window_set_icon_name(GtkWindow *self ,const gchar* name);
gboolean gtk_window_set_icon_from_file(GtkWindow *self ,const gchar* filename,GError** err);
GdkPixbuf* gtk_window_get_icon(GtkWindow *self );
const gchar* gtk_window_get_icon_name(GtkWindow *self );
none gtk_window_set_modal(GtkWindow *self ,gboolean modal);
gboolean gtk_window_get_modal(GtkWindow *self );
none gtk_window_add_mnemonic(GtkWindow *self ,guint keyval,GtkWidget* target);
none gtk_window_remove_mnemonic(GtkWindow *self ,guint keyval,GtkWidget* target);
gboolean gtk_window_mnemonic_activate(GtkWindow *self ,guint keyval,GdkModifierType modifier);
none gtk_window_set_mnemonic_modifier(GtkWindow *self ,GdkModifierType modifier);
GdkModifierType gtk_window_get_mnemonic_modifier(GtkWindow *self );
gboolean gtk_window_activate_key(GtkWindow *self ,GdkEventKey* event);
gboolean gtk_window_propagate_key_event(GtkWindow *self ,GdkEventKey* event);
none gtk_window_present(GtkWindow *self );
none gtk_window_present_with_time(GtkWindow *self ,guint32 timestamp);
none gtk_window_iconify(GtkWindow *self );
none gtk_window_deiconify(GtkWindow *self );
none gtk_window_stick(GtkWindow *self );
none gtk_window_unstick(GtkWindow *self );
none gtk_window_maximize(GtkWindow *self );
none gtk_window_unmaximize(GtkWindow *self );
none gtk_window_fullscreen(GtkWindow *self );
none gtk_window_unfullscreen(GtkWindow *self );
none gtk_window_set_keep_above(GtkWindow *self ,gboolean setting);
none gtk_window_set_keep_below(GtkWindow *self ,gboolean setting);
none gtk_window_begin_resize_drag(GtkWindow *self ,GdkWindowEdge edge,gint button,gint root_x,gint root_y,guint32 timestamp);
none gtk_window_begin_move_drag(GtkWindow *self ,gint button,gint root_x,gint root_y,guint32 timestamp);
none gtk_window_set_policy(GtkWindow *self ,gint allow_shrink,gint allow_grow,gint auto_shrink);
none gtk_window_set_default_size(GtkWindow *self ,gint width,gint height);
none gtk_window_get_default_size(GtkWindow *self ,gint* width,gint* height);
none gtk_window_resize(GtkWindow *self ,gint width,gint height);
none gtk_window_get_size(GtkWindow *self ,gint* width,gint* height);
none gtk_window_move(GtkWindow *self ,gint x,gint y);
none gtk_window_get_position(GtkWindow *self ,gint* root_x,gint* root_y);
gboolean gtk_window_parse_geometry(GtkWindow *self ,const gchar* geometry);
none gtk_window_reshow_with_initial_size(GtkWindow *self );
none gtk_window_remove_embedded_xid(GtkWindow *self ,guint xid);
none gtk_window_add_embedded_xid(GtkWindow *self ,guint xid);
GtkWidget* gtk_window_new(GtkWindowType type);
none gtk_plug_construct(GtkPlug *self ,GdkNativeWindow socket_id);
none gtk_plug_construct_for_display(GtkPlug *self ,GdkDisplay* display,GdkNativeWindow socket_id);
GdkNativeWindow gtk_plug_get_id(GtkPlug *self );
GtkWidget* gtk_plug_new(GdkNativeWindow socket_id);
none gtk_dialog_add_action_widget(GtkDialog *self ,GtkWidget* child,gint response_id);
GtkWidget* gtk_dialog_add_button(GtkDialog *self ,const gchar* button_text,gint response_id);
none gtk_dialog_add_buttons(GtkDialog *self ,const gchar* first_button_text);
none gtk_dialog_set_response_sensitive(GtkDialog *self ,gint response_id,gboolean setting);
none gtk_dialog_set_default_response(GtkDialog *self ,gint response_id);
gint gtk_dialog_get_response_for_widget(GtkDialog *self ,GtkWidget* widget);
none gtk_dialog_set_has_separator(GtkDialog *self ,gboolean setting);
gboolean gtk_dialog_get_has_separator(GtkDialog *self );
none gtk_dialog_set_alternative_button_order(GtkDialog *self ,gint first_response_id);
none gtk_dialog_set_alternative_button_order_from_array(GtkDialog *self ,gint n_params,gint* new_order);
none gtk_dialog_response(GtkDialog *self ,gint response_id);
gint gtk_dialog_run(GtkDialog *self );
GtkWidget* gtk_dialog_new();
GtkWidget* gtk_color_selection_dialog_new(const gchar* title);
const gchar* gtk_about_dialog_get_name(GtkAboutDialog *self );
none gtk_about_dialog_set_name(GtkAboutDialog *self ,const gchar* name);
const gchar* gtk_about_dialog_get_version(GtkAboutDialog *self );
none gtk_about_dialog_set_version(GtkAboutDialog *self ,const gchar* version);
const gchar* gtk_about_dialog_get_copyright(GtkAboutDialog *self );
none gtk_about_dialog_set_copyright(GtkAboutDialog *self ,const gchar* copyright);
const gchar* gtk_about_dialog_get_comments(GtkAboutDialog *self );
none gtk_about_dialog_set_comments(GtkAboutDialog *self ,const gchar* comments);
const gchar* gtk_about_dialog_get_license(GtkAboutDialog *self );
none gtk_about_dialog_set_license(GtkAboutDialog *self ,const gchar* license);
gboolean gtk_about_dialog_get_wrap_license(GtkAboutDialog *self );
none gtk_about_dialog_set_wrap_license(GtkAboutDialog *self ,gboolean wrap_license);
const gchar* gtk_about_dialog_get_website(GtkAboutDialog *self );
none gtk_about_dialog_set_website(GtkAboutDialog *self ,const gchar* website);
const gchar* gtk_about_dialog_get_website_label(GtkAboutDialog *self );
none gtk_about_dialog_set_website_label(GtkAboutDialog *self ,const gchar* website_label);
none gtk_about_dialog_set_authors(GtkAboutDialog *self ,const gchar** authors);
none gtk_about_dialog_set_documenters(GtkAboutDialog *self ,const gchar** documenters);
none gtk_about_dialog_set_artists(GtkAboutDialog *self ,const gchar** artists);
const gchar* gtk_about_dialog_get_translator_credits(GtkAboutDialog *self );
none gtk_about_dialog_set_translator_credits(GtkAboutDialog *self ,const gchar* translator_credits);
GdkPixbuf* gtk_about_dialog_get_logo(GtkAboutDialog *self );
none gtk_about_dialog_set_logo(GtkAboutDialog *self ,GdkPixbuf* logo);
const gchar* gtk_about_dialog_get_logo_icon_name(GtkAboutDialog *self );
none gtk_about_dialog_set_logo_icon_name(GtkAboutDialog *self ,const gchar* icon_name);
GtkWidget* gtk_about_dialog_new();
GtkWidget* gtk_file_chooser_dialog_new(const gchar* title,GtkWindow* parent,GtkFileChooserAction action,const gchar* first_button_text);
none gtk_file_selection_set_filename(GtkFileSelection *self ,const gchar* filename);
const gchar* gtk_file_selection_get_filename(GtkFileSelection *self );
none gtk_file_selection_complete(GtkFileSelection *self ,const gchar* pattern);
none gtk_file_selection_show_fileop_buttons(GtkFileSelection *self );
none gtk_file_selection_hide_fileop_buttons(GtkFileSelection *self );
gchar** gtk_file_selection_get_selections(GtkFileSelection *self );
none gtk_file_selection_set_select_multiple(GtkFileSelection *self ,gboolean select_multiple);
gboolean gtk_file_selection_get_select_multiple(GtkFileSelection *self );
GtkWidget* gtk_file_selection_new(const gchar* title);
gchar* gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog *self );
GdkFont* gtk_font_selection_dialog_get_font(GtkFontSelectionDialog *self );
gboolean gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog *self ,const gchar* fontname);
const gchar* gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog *self );
none gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog *self ,const gchar* text);
GtkWidget* gtk_font_selection_dialog_new(const gchar* title);
GtkWidget* gtk_input_dialog_new();
none gtk_message_dialog_set_markup(GtkMessageDialog *self ,const gchar* str);
none gtk_message_dialog_format_secondary_text(GtkMessageDialog *self ,const gchar* message_format);
none gtk_message_dialog_format_secondary_markup(GtkMessageDialog *self ,const gchar* message_format);
GtkWidget* gtk_message_dialog_new(GtkWindow* parent,GtkDialogFlags flags,GtkMessageType type,GtkButtonsType buttons,const gchar* message_format);
none gtk_fixed_put(GtkFixed *self ,GtkWidget* widget,gint x,gint y);
none gtk_fixed_move(GtkFixed *self ,GtkWidget* widget,gint x,gint y);
none gtk_fixed_set_has_window(GtkFixed *self ,gboolean has_window);
gboolean gtk_fixed_get_has_window(GtkFixed *self );
GtkWidget* gtk_fixed_new();
none gtk_icon_view_set_model(GtkIconView *self ,GtkTreeModel* model);
GtkTreeModel* gtk_icon_view_get_model(GtkIconView *self );
none gtk_icon_view_set_text_column(GtkIconView *self ,gint column);
gint gtk_icon_view_get_text_column(GtkIconView *self );
none gtk_icon_view_set_markup_column(GtkIconView *self ,gint column);
gint gtk_icon_view_get_markup_column(GtkIconView *self );
none gtk_icon_view_set_pixbuf_column(GtkIconView *self ,gint column);
gint gtk_icon_view_get_pixbuf_column(GtkIconView *self );
none gtk_icon_view_set_orientation(GtkIconView *self ,GtkOrientation orientation);
GtkOrientation gtk_icon_view_get_orientation(GtkIconView *self );
none gtk_icon_view_set_columns(GtkIconView *self ,gint columns);
gint gtk_icon_view_get_columns(GtkIconView *self );
none gtk_icon_view_set_item_width(GtkIconView *self ,gint item_width);
gint gtk_icon_view_get_item_width(GtkIconView *self );
none gtk_icon_view_set_spacing(GtkIconView *self ,gint spacing);
gint gtk_icon_view_get_spacing(GtkIconView *self );
none gtk_icon_view_set_row_spacing(GtkIconView *self ,gint row_spacing);
gint gtk_icon_view_get_row_spacing(GtkIconView *self );
none gtk_icon_view_set_column_spacing(GtkIconView *self ,gint column_spacing);
gint gtk_icon_view_get_column_spacing(GtkIconView *self );
none gtk_icon_view_set_margin(GtkIconView *self ,gint margin);
gint gtk_icon_view_get_margin(GtkIconView *self );
GtkTreePath* gtk_icon_view_get_path_at_pos(GtkIconView *self ,gint x,gint y);
gboolean gtk_icon_view_get_item_at_pos(GtkIconView *self ,gint x,gint y,GtkTreePath** path,GtkCellRenderer** cell);
gboolean gtk_icon_view_get_visible_range(GtkIconView *self ,GtkTreePath** start_path,GtkTreePath** end_path);
none gtk_icon_view_selected_foreach(GtkIconView *self ,GtkIconViewForeachFunc func,gpointer data);
none gtk_icon_view_set_selection_mode(GtkIconView *self ,GtkSelectionMode mode);
GtkSelectionMode gtk_icon_view_get_selection_mode(GtkIconView *self );
none gtk_icon_view_select_path(GtkIconView *self ,GtkTreePath* path);
none gtk_icon_view_unselect_path(GtkIconView *self ,GtkTreePath* path);
gboolean gtk_icon_view_path_is_selected(GtkIconView *self ,GtkTreePath* path);
GList* gtk_icon_view_get_selected_items(GtkIconView *self );
none gtk_icon_view_select_all(GtkIconView *self );
none gtk_icon_view_unselect_all(GtkIconView *self );
none gtk_icon_view_item_activated(GtkIconView *self ,GtkTreePath* path);
none gtk_icon_view_set_cursor(GtkIconView *self ,GtkTreePath* path,GtkCellRenderer* cell,gboolean start_editing);
gboolean gtk_icon_view_get_cursor(GtkIconView *self ,GtkTreePath** path,GtkCellRenderer** cell);
none gtk_icon_view_scroll_to_path(GtkIconView *self ,GtkTreePath* path,gboolean use_align,gfloat row_align,gfloat col_align);
none gtk_icon_view_enable_model_drag_source(GtkIconView *self ,GdkModifierType start_button_mask,const GtkTargetEntry* targets,gint n_targets,GdkDragAction actions);
none gtk_icon_view_enable_model_drag_dest(GtkIconView *self ,const GtkTargetEntry* targets,gint n_targets,GdkDragAction actions);
none gtk_icon_view_unset_model_drag_source(GtkIconView *self );
none gtk_icon_view_unset_model_drag_dest(GtkIconView *self );
none gtk_icon_view_set_reorderable(GtkIconView *self ,gboolean reorderable);
gboolean gtk_icon_view_get_reorderable(GtkIconView *self );
none gtk_icon_view_set_drag_dest_item(GtkIconView *self ,GtkTreePath* path,GtkIconViewDropPosition pos);
none gtk_icon_view_get_drag_dest_item(GtkIconView *self ,GtkTreePath** path,GtkIconViewDropPosition* pos);
gboolean gtk_icon_view_get_dest_item_at_pos(GtkIconView *self ,gint drag_x,gint drag_y,GtkTreePath** path,GtkIconViewDropPosition* pos);
GdkPixmap* gtk_icon_view_create_drag_icon(GtkIconView *self ,GtkTreePath* path);
GtkWidget* gtk_icon_view_new();
none gtk_layout_put(GtkLayout *self ,GtkWidget* child_widget,gint x,gint y);
none gtk_layout_move(GtkLayout *self ,GtkWidget* child_widget,gint x,gint y);
none gtk_layout_set_size(GtkLayout *self ,guint width,guint height);
none gtk_layout_get_size(GtkLayout *self ,guint* width,guint* height);
GtkAdjustment* gtk_layout_get_hadjustment(GtkLayout *self );
GtkAdjustment* gtk_layout_get_vadjustment(GtkLayout *self );
none gtk_layout_set_hadjustment(GtkLayout *self ,GtkAdjustment* adjustment);
none gtk_layout_set_vadjustment(GtkLayout *self ,GtkAdjustment* adjustment);
none gtk_layout_freeze(GtkLayout *self );
none gtk_layout_thaw(GtkLayout *self );
GtkWidget* gtk_layout_new(GtkAdjustment* hadjustment,GtkAdjustment* vadjustment);
none gtk_list_insert_items(GtkList *self ,GList* items,gint position);
none gtk_list_append_items(GtkList *self ,GList* items);
none gtk_list_prepend_items(GtkList *self ,GList* items);
none gtk_list_remove_items(GtkList *self ,GList* items);
none gtk_list_remove_items_no_unref(GtkList *self ,GList* items);
none gtk_list_clear_items(GtkList *self ,gint start,gint end);
none gtk_list_select_item(GtkList *self ,gint item);
none gtk_list_unselect_item(GtkList *self ,gint item);
none gtk_list_select_child(GtkList *self ,GtkWidget* child);
none gtk_list_unselect_child(GtkList *self ,GtkWidget* child);
gint gtk_list_child_position(GtkList *self ,GtkWidget* child);
none gtk_list_set_selection_mode(GtkList *self ,GtkSelectionMode mode);
none gtk_list_extend_selection(GtkList *self ,GtkScrollType scroll_type,gfloat position,gboolean auto_start_selection);
none gtk_list_start_selection(GtkList *self );
none gtk_list_end_selection(GtkList *self );
none gtk_list_select_all(GtkList *self );
none gtk_list_unselect_all(GtkList *self );
none gtk_list_scroll_horizontal(GtkList *self ,GtkScrollType scroll_type,gfloat position);
none gtk_list_scroll_vertical(GtkList *self ,GtkScrollType scroll_type,gfloat position);
none gtk_list_toggle_add_mode(GtkList *self );
none gtk_list_toggle_focus_row(GtkList *self );
none gtk_list_toggle_row(GtkList *self ,GtkWidget* item);
none gtk_list_undo_selection(GtkList *self );
none gtk_list_end_drag_selection(GtkList *self );
GtkWidget* gtk_list_new();
none gtk_menu_shell_append(GtkMenuShell *self ,GtkWidget* child);
none gtk_menu_shell_prepend(GtkMenuShell *self ,GtkWidget* child);
none gtk_menu_shell_insert(GtkMenuShell *self ,GtkWidget* child,gint position);
none gtk_menu_shell_deactivate(GtkMenuShell *self );
none gtk_menu_shell_select_item(GtkMenuShell *self ,GtkWidget* menu_item);
none gtk_menu_shell_deselect(GtkMenuShell *self );
none gtk_menu_shell_activate_item(GtkMenuShell *self ,GtkWidget* menu_item,gboolean force_deactivate);
none gtk_menu_shell_select_first(GtkMenuShell *self ,gboolean search_sensitive);
none gtk_menu_shell_cancel(GtkMenuShell *self );
gboolean gtk_menu_shell_get_take_focus(GtkMenuShell *self );
none gtk_menu_shell_set_take_focus(GtkMenuShell *self ,gboolean take_focus);
GtkPackDirection gtk_menu_bar_get_pack_direction(GtkMenuBar *self );
none gtk_menu_bar_set_pack_direction(GtkMenuBar *self ,GtkPackDirection pack_dir);
GtkPackDirection gtk_menu_bar_get_child_pack_direction(GtkMenuBar *self );
none gtk_menu_bar_set_child_pack_direction(GtkMenuBar *self ,GtkPackDirection child_pack_dir);
GtkWidget* gtk_menu_bar_new();
none gtk_menu_popup(GtkMenu *self ,GtkWidget* parent_menu_shell,GtkWidget* parent_menu_item,GtkMenuPositionFunc func,gpointer data,guint button,guint32 activate_time);
none gtk_menu_reposition(GtkMenu *self );
none gtk_menu_popdown(GtkMenu *self );
GtkWidget* gtk_menu_get_active(GtkMenu *self );
none gtk_menu_set_active(GtkMenu *self ,guint index_);
none gtk_menu_set_accel_group(GtkMenu *self ,GtkAccelGroup* accel_group);
GtkAccelGroup* gtk_menu_get_accel_group(GtkMenu *self );
none gtk_menu_set_accel_path(GtkMenu *self ,const gchar* accel_path);
none gtk_menu_attach_to_widget(GtkMenu *self ,GtkWidget* attach_widget,GtkMenuDetachFunc detacher);
none gtk_menu_detach(GtkMenu *self );
GtkWidget* gtk_menu_get_attach_widget(GtkMenu *self );
none gtk_menu_set_tearoff_state(GtkMenu *self ,gboolean torn_off);
gboolean gtk_menu_get_tearoff_state(GtkMenu *self );
none gtk_menu_set_title(GtkMenu *self ,const gchar* title);
const gchar* gtk_menu_get_title(GtkMenu *self );
none gtk_menu_reorder_child(GtkMenu *self ,GtkWidget* child,gint position);
none gtk_menu_set_screen(GtkMenu *self ,GdkScreen* screen);
none gtk_menu_attach(GtkMenu *self ,GtkWidget* child,guint left_attach,guint right_attach,guint top_attach,guint bottom_attach);
none gtk_menu_set_monitor(GtkMenu *self ,gint monitor_num);
GtkWidget* gtk_menu_new();
gint gtk_notebook_append_page(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label);
gint gtk_notebook_append_page_menu(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label,GtkWidget* menu_label);
gint gtk_notebook_prepend_page(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label);
gint gtk_notebook_prepend_page_menu(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label,GtkWidget* menu_label);
gint gtk_notebook_insert_page(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label,gint position);
gint gtk_notebook_insert_page_menu(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label,GtkWidget* menu_label,gint position);
none gtk_notebook_remove_page(GtkNotebook *self ,gint page_num);
gint gtk_notebook_get_current_page(GtkNotebook *self );
GtkWidget* gtk_notebook_get_nth_page(GtkNotebook *self ,gint page_num);
gint gtk_notebook_get_n_pages(GtkNotebook *self );
gint gtk_notebook_page_num(GtkNotebook *self ,GtkWidget* child);
none gtk_notebook_set_current_page(GtkNotebook *self ,gint page_num);
none gtk_notebook_next_page(GtkNotebook *self );
none gtk_notebook_prev_page(GtkNotebook *self );
none gtk_notebook_set_show_border(GtkNotebook *self ,gboolean show_border);
gboolean gtk_notebook_get_show_border(GtkNotebook *self );
none gtk_notebook_set_show_tabs(GtkNotebook *self ,gboolean show_tabs);
gboolean gtk_notebook_get_show_tabs(GtkNotebook *self );
none gtk_notebook_set_tab_pos(GtkNotebook *self ,GtkPositionType pos);
GtkPositionType gtk_notebook_get_tab_pos(GtkNotebook *self );
none gtk_notebook_set_homogeneous_tabs(GtkNotebook *self ,gboolean homogeneous);
none gtk_notebook_set_tab_border(GtkNotebook *self ,guint border_width);
none gtk_notebook_set_tab_hborder(GtkNotebook *self ,guint tab_hborder);
none gtk_notebook_set_tab_vborder(GtkNotebook *self ,guint tab_vborder);
none gtk_notebook_set_scrollable(GtkNotebook *self ,gboolean scrollable);
gboolean gtk_notebook_get_scrollable(GtkNotebook *self );
none gtk_notebook_popup_enable(GtkNotebook *self );
none gtk_notebook_popup_disable(GtkNotebook *self );
GtkWidget* gtk_notebook_get_tab_label(GtkNotebook *self ,GtkWidget* child);
none gtk_notebook_set_tab_label(GtkNotebook *self ,GtkWidget* child,GtkWidget* tab_label);
none gtk_notebook_set_tab_label_text(GtkNotebook *self ,GtkWidget* child,const gchar* tab_text);
const gchar* gtk_notebook_get_tab_label_text(GtkNotebook *self ,GtkWidget* child);
GtkWidget* gtk_notebook_get_menu_label(GtkNotebook *self ,GtkWidget* child);
none gtk_notebook_set_menu_label(GtkNotebook *self ,GtkWidget* child,GtkWidget* menu_label);
none gtk_notebook_set_menu_label_text(GtkNotebook *self ,GtkWidget* child,const gchar* menu_text);
const gchar* gtk_notebook_get_menu_label_text(GtkNotebook *self ,GtkWidget* child);
none gtk_notebook_query_tab_label_packing(GtkNotebook *self ,GtkWidget* child,gboolean* expand,gboolean* fill,GtkPackType* pack_type);
none gtk_notebook_set_tab_label_packing(GtkNotebook *self ,GtkWidget* child,gboolean expand,gboolean fill,GtkPackType pack_type);
none gtk_notebook_reorder_child(GtkNotebook *self ,GtkWidget* child,gint position);
GtkWidget* gtk_notebook_new();
none gtk_paned_add1(GtkPaned *self ,GtkWidget* child);
none gtk_paned_add2(GtkPaned *self ,GtkWidget* child);
none gtk_paned_pack1(GtkPaned *self ,GtkWidget* child,gboolean resize,gboolean shrink);
none gtk_paned_pack2(GtkPaned *self ,GtkWidget* child,gboolean resize,gboolean shrink);
gint gtk_paned_get_position(GtkPaned *self );
none gtk_paned_set_position(GtkPaned *self ,gint position);
GtkWidget* gtk_paned_get_child1(GtkPaned *self );
GtkWidget* gtk_paned_get_child2(GtkPaned *self );
none gtk_paned_compute_position(GtkPaned *self ,gint allocation,gint child1_req,gint child2_req);
none gtk_socket_add_id(GtkSocket *self ,GdkNativeWindow window_id);
GdkNativeWindow gtk_socket_get_id(GtkSocket *self );
none gtk_socket_steal(GtkSocket *self ,GdkNativeWindow wid);
GtkWidget* gtk_socket_new();
none gtk_table_resize(GtkTable *self ,guint rows,guint columns);
none gtk_table_attach(GtkTable *self ,GtkWidget* child,guint left_attach,guint right_attach,guint top_attach,guint bottom_attach,GtkAttachOptions xoptions,GtkAttachOptions yoptions,guint xpadding,guint ypadding);
none gtk_table_attach_defaults(GtkTable *self ,GtkWidget* widget,guint left_attach,guint right_attach,guint top_attach,guint bottom_attach);
none gtk_table_set_row_spacing(GtkTable *self ,guint row,guint spacing);
guint gtk_table_get_row_spacing(GtkTable *self ,guint row);
none gtk_table_set_col_spacing(GtkTable *self ,guint column,guint spacing);
guint gtk_table_get_col_spacing(GtkTable *self ,guint column);
none gtk_table_set_row_spacings(GtkTable *self ,guint spacing);
guint gtk_table_get_default_row_spacing(GtkTable *self );
none gtk_table_set_col_spacings(GtkTable *self ,guint spacing);
guint gtk_table_get_default_col_spacing(GtkTable *self );
none gtk_table_set_homogeneous(GtkTable *self ,gboolean homogeneous);
gboolean gtk_table_get_homogeneous(GtkTable *self );
GtkWidget* gtk_table_new(guint rows,guint columns,gboolean homogeneous);
none gtk_text_view_set_buffer(GtkTextView *self ,GtkTextBuffer* buffer);
GtkTextBuffer* gtk_text_view_get_buffer(GtkTextView *self );
gboolean gtk_text_view_scroll_to_iter(GtkTextView *self ,GtkTextIter* iter,gdouble within_margin,gboolean use_align,gdouble xalign,gdouble yalign);
none gtk_text_view_scroll_to_mark(GtkTextView *self ,GtkTextMark* mark,gdouble within_margin,gboolean use_align,gdouble xalign,gdouble yalign);
none gtk_text_view_scroll_mark_onscreen(GtkTextView *self ,GtkTextMark* mark);
gboolean gtk_text_view_move_mark_onscreen(GtkTextView *self ,GtkTextMark* mark);
gboolean gtk_text_view_place_cursor_onscreen(GtkTextView *self );
none gtk_text_view_get_visible_rect(GtkTextView *self ,GdkRectangle* visible_rect);
none gtk_text_view_set_cursor_visible(GtkTextView *self ,gboolean setting);
gboolean gtk_text_view_get_cursor_visible(GtkTextView *self );
none gtk_text_view_get_iter_location(GtkTextView *self ,const GtkTextIter* iter,GdkRectangle* location);
none gtk_text_view_get_iter_at_location(GtkTextView *self ,GtkTextIter* iter,gint x,gint y);
none gtk_text_view_get_iter_at_position(GtkTextView *self ,GtkTextIter* iter,gint* trailing,gint x,gint y);
none gtk_text_view_get_line_yrange(GtkTextView *self ,const GtkTextIter* iter,gint* y,gint* height);
none gtk_text_view_get_line_at_y(GtkTextView *self ,GtkTextIter* target_iter,gint y,gint* line_top);
none gtk_text_view_buffer_to_window_coords(GtkTextView *self ,GtkTextWindowType win,gint buffer_x,gint buffer_y,gint* window_x,gint* window_y);
none gtk_text_view_window_to_buffer_coords(GtkTextView *self ,GtkTextWindowType win,gint window_x,gint window_y,gint* buffer_x,gint* buffer_y);
GdkWindow* gtk_text_view_get_window(GtkTextView *self ,GtkTextWindowType win);
GtkTextWindowType gtk_text_view_get_window_type(GtkTextView *self ,GdkWindow* window);
none gtk_text_view_set_border_window_size(GtkTextView *self ,GtkTextWindowType type,gint size);
gint gtk_text_view_get_border_window_size(GtkTextView *self ,GtkTextWindowType type);
gboolean gtk_text_view_forward_display_line(GtkTextView *self ,GtkTextIter* iter);
gboolean gtk_text_view_backward_display_line(GtkTextView *self ,GtkTextIter* iter);
gboolean gtk_text_view_forward_display_line_end(GtkTextView *self ,GtkTextIter* iter);
gboolean gtk_text_view_backward_display_line_start(GtkTextView *self ,GtkTextIter* iter);
gboolean gtk_text_view_starts_display_line(GtkTextView *self ,const GtkTextIter* iter);
gboolean gtk_text_view_move_visually(GtkTextView *self ,GtkTextIter* iter,gint count);
none gtk_text_view_add_child_at_anchor(GtkTextView *self ,GtkWidget* child,GtkTextChildAnchor* anchor);
none gtk_text_view_add_child_in_window(GtkTextView *self ,GtkWidget* child,GtkTextWindowType which_window,gint xpos,gint ypos);
none gtk_text_view_move_child(GtkTextView *self ,GtkWidget* child,gint xpos,gint ypos);
none gtk_text_view_set_wrap_mode(GtkTextView *self ,GtkWrapMode wrap_mode);
GtkWrapMode gtk_text_view_get_wrap_mode(GtkTextView *self );
none gtk_text_view_set_editable(GtkTextView *self ,gboolean setting);
gboolean gtk_text_view_get_editable(GtkTextView *self );
none gtk_text_view_set_overwrite(GtkTextView *self ,gboolean overwrite);
gboolean gtk_text_view_get_overwrite(GtkTextView *self );
none gtk_text_view_set_accepts_tab(GtkTextView *self ,gboolean accepts_tab);
gboolean gtk_text_view_get_accepts_tab(GtkTextView *self );
none gtk_text_view_set_pixels_above_lines(GtkTextView *self ,gint pixels_above_lines);
gint gtk_text_view_get_pixels_above_lines(GtkTextView *self );
none gtk_text_view_set_pixels_below_lines(GtkTextView *self ,gint pixels_below_lines);
gint gtk_text_view_get_pixels_below_lines(GtkTextView *self );
none gtk_text_view_set_pixels_inside_wrap(GtkTextView *self ,gint pixels_inside_wrap);
gint gtk_text_view_get_pixels_inside_wrap(GtkTextView *self );
none gtk_text_view_set_justification(GtkTextView *self ,GtkJustification justification);
GtkJustification gtk_text_view_get_justification(GtkTextView *self );
none gtk_text_view_set_left_margin(GtkTextView *self ,gint left_margin);
gint gtk_text_view_get_left_margin(GtkTextView *self );
none gtk_text_view_set_right_margin(GtkTextView *self ,gint right_margin);
gint gtk_text_view_get_right_margin(GtkTextView *self );
none gtk_text_view_set_indent(GtkTextView *self ,gint indent);
gint gtk_text_view_get_indent(GtkTextView *self );
none gtk_text_view_set_tabs(GtkTextView *self ,PangoTabArray* tabs);
PangoTabArray* gtk_text_view_get_tabs(GtkTextView *self );
GtkTextAttributes* gtk_text_view_get_default_attributes(GtkTextView *self );
GtkWidget* gtk_text_view_new();
none gtk_toolbar_insert(GtkToolbar *self ,GtkToolItem* item,gint pos);
gint gtk_toolbar_get_item_index(GtkToolbar *self ,GtkToolItem* item);
gint gtk_toolbar_get_n_items(GtkToolbar *self );
GtkToolItem* gtk_toolbar_get_nth_item(GtkToolbar *self ,gint n);
gboolean gtk_toolbar_get_show_arrow(GtkToolbar *self );
none gtk_toolbar_set_show_arrow(GtkToolbar *self ,gboolean show_arrow);
GtkOrientation gtk_toolbar_get_orientation(GtkToolbar *self );
none gtk_toolbar_set_orientation(GtkToolbar *self ,GtkOrientation orientation);
gboolean gtk_toolbar_get_tooltips(GtkToolbar *self );
none gtk_toolbar_set_tooltips(GtkToolbar *self ,gboolean enable);
GtkToolbarStyle gtk_toolbar_get_style(GtkToolbar *self );
none gtk_toolbar_set_style(GtkToolbar *self ,GtkToolbarStyle style);
none gtk_toolbar_unset_style(GtkToolbar *self );
GtkIconSize gtk_toolbar_get_icon_size(GtkToolbar *self );
GtkReliefStyle gtk_toolbar_get_relief_style(GtkToolbar *self );
gint gtk_toolbar_get_drop_index(GtkToolbar *self ,gint x,gint y);
none gtk_toolbar_set_drop_highlight_item(GtkToolbar *self ,GtkToolItem* tool_item,gint index_);
none gtk_toolbar_set_icon_size(GtkToolbar *self ,GtkIconSize icon_size);
none gtk_toolbar_unset_icon_size(GtkToolbar *self );
GtkWidget* gtk_toolbar_append_item(GtkToolbar *self ,const char* text,const char* tooltip_text,const char* tooltip_private_text,GtkWidget* icon,GtkSignalFunc callback,gpointer user_data);
GtkWidget* gtk_toolbar_prepend_item(GtkToolbar *self ,const char* text,const char* tooltip_text,const char* tooltip_private_text,GtkWidget* icon,GtkSignalFunc callback,gpointer user_data);
GtkWidget* gtk_toolbar_insert_item(GtkToolbar *self ,const char* text,const char* tooltip_text,const char* tooltip_private_text,GtkWidget* icon,GtkSignalFunc callback,gpointer user_data,gint position);
GtkWidget* gtk_toolbar_insert_stock(GtkToolbar *self ,const gchar* stock_id,const char* tooltip_text,const char* tooltip_private_text,GtkSignalFunc callback,gpointer user_data,gint position);
none gtk_toolbar_append_space(GtkToolbar *self );
none gtk_toolbar_prepend_space(GtkToolbar *self );
none gtk_toolbar_insert_space(GtkToolbar *self ,gint position);
none gtk_toolbar_remove_space(GtkToolbar *self ,gint position);
GtkWidget* gtk_toolbar_append_element(GtkToolbar *self ,GtkToolbarChildType type,GtkWidget* widget,const char* text,const char* tooltip_text,const char* tooltip_private_text,GtkWidget* icon,GtkSignalFunc callback,gpointer user_data);
GtkWidget* gtk_toolbar_prepend_element(GtkToolbar *self ,GtkToolbarChildType type,GtkWidget* widget,const char* text,const char* tooltip_text,const char* tooltip_private_text,GtkWidget* icon,GtkSignalFunc callback,gpointer user_data);
GtkWidget* gtk_toolbar_insert_element(GtkToolbar *self ,GtkToolbarChildType type,GtkWidget* widget,const char* text,const char* tooltip_text,const char* tooltip_private_text,GtkWidget* icon,GtkSignalFunc callback,gpointer user_data,gint position);
none gtk_toolbar_append_widget(GtkToolbar *self ,GtkWidget* widget,const char* tooltip_text,const char* tooltip_private_text);
none gtk_toolbar_prepend_widget(GtkToolbar *self ,GtkWidget* widget,const char* tooltip_text,const char* tooltip_private_text);
none gtk_toolbar_insert_widget(GtkToolbar *self ,GtkWidget* widget,const char* tooltip_text,const char* tooltip_private_text,gint position);
GtkWidget* gtk_toolbar_new();
none gtk_tree_append(GtkTree *self ,GtkWidget* tree_item);
none gtk_tree_prepend(GtkTree *self ,GtkWidget* tree_item);
none gtk_tree_insert(GtkTree *self ,GtkWidget* tree_item,gint position);
none gtk_tree_remove_items(GtkTree *self ,GList* items);
none gtk_tree_clear_items(GtkTree *self ,gint start,gint end);
none gtk_tree_select_item(GtkTree *self ,gint item);
none gtk_tree_unselect_item(GtkTree *self ,gint item);
none gtk_tree_select_child(GtkTree *self ,GtkWidget* tree_item);
none gtk_tree_unselect_child(GtkTree *self ,GtkWidget* tree_item);
gint gtk_tree_child_position(GtkTree *self ,GtkWidget* child);
none gtk_tree_set_selection_mode(GtkTree *self ,GtkSelectionMode mode);
none gtk_tree_set_view_mode(GtkTree *self ,GtkTreeViewMode mode);
none gtk_tree_set_view_lines(GtkTree *self ,gboolean flag);
none gtk_tree_remove_item(GtkTree *self ,GtkWidget* child);
GtkWidget* gtk_tree_new();
GtkTreeModel* gtk_tree_view_get_model(GtkTreeView *self );
none gtk_tree_view_set_model(GtkTreeView *self ,GtkTreeModel* model);
GtkTreeSelection* gtk_tree_view_get_selection(GtkTreeView *self );
GtkAdjustment* gtk_tree_view_get_hadjustment(GtkTreeView *self );
none gtk_tree_view_set_hadjustment(GtkTreeView *self ,GtkAdjustment* adjustment);
GtkAdjustment* gtk_tree_view_get_vadjustment(GtkTreeView *self );
none gtk_tree_view_set_vadjustment(GtkTreeView *self ,GtkAdjustment* adjustment);
gboolean gtk_tree_view_get_headers_visible(GtkTreeView *self );
none gtk_tree_view_set_headers_visible(GtkTreeView *self ,gboolean headers_visible);
none gtk_tree_view_columns_autosize(GtkTreeView *self );
none gtk_tree_view_set_headers_clickable(GtkTreeView *self ,gboolean setting);
none gtk_tree_view_set_rules_hint(GtkTreeView *self ,gboolean setting);
gboolean gtk_tree_view_get_rules_hint(GtkTreeView *self );
gint gtk_tree_view_append_column(GtkTreeView *self ,GtkTreeViewColumn* column);
gint gtk_tree_view_remove_column(GtkTreeView *self ,GtkTreeViewColumn* column);
gint gtk_tree_view_insert_column(GtkTreeView *self ,GtkTreeViewColumn* column,gint position);
gint gtk_tree_view_insert_column_with_attributes(GtkTreeView *self ,gint position,const gchar* title,GtkCellRenderer* cell);
gint gtk_tree_view_insert_column_with_data_func(GtkTreeView *self ,gint position,const gchar* title,GtkCellRenderer* cell,GtkTreeCellDataFunc func,gpointer data,GDestroyNotify dnotify);
GtkTreeViewColumn* gtk_tree_view_get_column(GtkTreeView *self ,gint n);
GList* gtk_tree_view_get_columns(GtkTreeView *self );
none gtk_tree_view_move_column_after(GtkTreeView *self ,GtkTreeViewColumn* column,GtkTreeViewColumn* base_column);
none gtk_tree_view_set_expander_column(GtkTreeView *self ,GtkTreeViewColumn* column);
GtkTreeViewColumn* gtk_tree_view_get_expander_column(GtkTreeView *self );
none gtk_tree_view_set_column_drag_function(GtkTreeView *self ,GtkTreeViewColumnDropFunc func,gpointer user_data,GtkDestroyNotify destroy);
none gtk_tree_view_scroll_to_point(GtkTreeView *self ,gint tree_x,gint tree_y);
none gtk_tree_view_scroll_to_cell(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewColumn* column,gboolean use_align,gfloat row_align,gfloat col_align);
none gtk_tree_view_row_activated(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewColumn* column);
none gtk_tree_view_expand_all(GtkTreeView *self );
none gtk_tree_view_collapse_all(GtkTreeView *self );
none gtk_tree_view_expand_to_path(GtkTreeView *self ,GtkTreePath* path);
gboolean gtk_tree_view_expand_row(GtkTreeView *self ,GtkTreePath* path,gboolean open_all);
gboolean gtk_tree_view_collapse_row(GtkTreeView *self ,GtkTreePath* path);
none gtk_tree_view_map_expanded_rows(GtkTreeView *self ,GtkTreeViewMappingFunc func,gpointer data);
gboolean gtk_tree_view_row_expanded(GtkTreeView *self ,GtkTreePath* path);
none gtk_tree_view_set_reorderable(GtkTreeView *self ,gboolean reorderable);
gboolean gtk_tree_view_get_reorderable(GtkTreeView *self );
none gtk_tree_view_set_cursor(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewColumn* focus_column,gboolean start_editing);
none gtk_tree_view_set_cursor_on_cell(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewColumn* focus_column,GtkCellRenderer* focus_cell,gboolean start_editing);
none gtk_tree_view_get_cursor(GtkTreeView *self ,GtkTreePath** path,GtkTreeViewColumn** focus_column);
GdkWindow* gtk_tree_view_get_bin_window(GtkTreeView *self );
gboolean gtk_tree_view_get_path_at_pos(GtkTreeView *self ,gint x,gint y,GtkTreePath** path,GtkTreeViewColumn** column,gint* cell_x,gint* cell_y);
none gtk_tree_view_get_cell_area(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewColumn* column,GdkRectangle* rect);
none gtk_tree_view_get_background_area(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewColumn* column,GdkRectangle* rect);
none gtk_tree_view_get_visible_rect(GtkTreeView *self ,GdkRectangle* visible_rect);
none gtk_tree_view_widget_to_tree_coords(GtkTreeView *self ,gint wx,gint wy,gint* tx,gint* ty);
none gtk_tree_view_tree_to_widget_coords(GtkTreeView *self ,gint tx,gint ty,gint* wx,gint* wy);
gboolean gtk_tree_view_get_visible_range(GtkTreeView *self ,GtkTreePath** start_path,GtkTreePath** end_path);
none gtk_tree_view_enable_model_drag_source(GtkTreeView *self ,GdkModifierType start_button_mask,const GtkTargetEntry* targets,gint n_targets,GdkDragAction actions);
none gtk_tree_view_enable_model_drag_dest(GtkTreeView *self ,const GtkTargetEntry* targets,gint n_targets,GdkDragAction actions);
none gtk_tree_view_unset_rows_drag_source(GtkTreeView *self );
none gtk_tree_view_unset_rows_drag_dest(GtkTreeView *self );
none gtk_tree_view_set_drag_dest_row(GtkTreeView *self ,GtkTreePath* path,GtkTreeViewDropPosition pos);
none gtk_tree_view_get_drag_dest_row(GtkTreeView *self ,GtkTreePath** path,GtkTreeViewDropPosition* pos);
gboolean gtk_tree_view_get_dest_row_at_pos(GtkTreeView *self ,gint drag_x,gint drag_y,GtkTreePath** path,GtkTreeViewDropPosition* pos);
GdkPixmap* gtk_tree_view_create_row_drag_icon(GtkTreeView *self ,GtkTreePath* path);
none gtk_tree_view_set_enable_search(GtkTreeView *self ,gboolean enable_search);
gboolean gtk_tree_view_get_enable_search(GtkTreeView *self );
gint gtk_tree_view_get_search_column(GtkTreeView *self );
none gtk_tree_view_set_search_column(GtkTreeView *self ,gint column);
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func(GtkTreeView *self );
none gtk_tree_view_set_search_equal_func(GtkTreeView *self ,GtkTreeViewSearchEqualFunc search_equal_func,gpointer search_user_data,GtkDestroyNotify search_destroy);
none gtk_tree_view_set_destroy_count_func(GtkTreeView *self ,GtkTreeDestroyCountFunc func,gpointer data,GtkDestroyNotify destroy);
none gtk_tree_view_set_fixed_height_mode(GtkTreeView *self ,gboolean enable);
gboolean gtk_tree_view_get_fixed_height_mode(GtkTreeView *self );
none gtk_tree_view_set_hover_selection(GtkTreeView *self ,gboolean hover);
gboolean gtk_tree_view_get_hover_selection(GtkTreeView *self );
none gtk_tree_view_set_hover_expand(GtkTreeView *self ,gboolean expand);
gboolean gtk_tree_view_get_hover_expand(GtkTreeView *self );
GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func(GtkTreeView *self );
none gtk_tree_view_set_row_separator_func(GtkTreeView *self ,GtkTreeViewRowSeparatorFunc func,gpointer data,GtkDestroyNotify destroy);
GtkWidget* gtk_tree_view_new();
none gtk_cell_view_set_model(GtkCellView *self ,GtkTreeModel* model);
none gtk_cell_view_set_displayed_row(GtkCellView *self ,GtkTreePath* path);
GtkTreePath* gtk_cell_view_get_displayed_row(GtkCellView *self );
gboolean gtk_cell_view_get_size_of_row(GtkCellView *self ,GtkTreePath* path,GtkRequisition* requisition);
none gtk_cell_view_set_background_color(GtkCellView *self ,const GdkColor* color);
GList* gtk_cell_view_get_cell_renderers(GtkCellView *self );
GtkWidget* gtk_cell_view_new();
gboolean gtk_calendar_select_month(GtkCalendar *self ,guint month,guint year);
none gtk_calendar_select_day(GtkCalendar *self ,guint day);
gboolean gtk_calendar_mark_day(GtkCalendar *self ,guint day);
gboolean gtk_calendar_unmark_day(GtkCalendar *self ,guint day);
none gtk_calendar_clear_marks(GtkCalendar *self );
none gtk_calendar_set_display_options(GtkCalendar *self ,GtkCalendarDisplayOptions flags);
GtkCalendarDisplayOptions gtk_calendar_get_display_options(GtkCalendar *self );
none gtk_calendar_display_options(GtkCalendar *self ,GtkCalendarDisplayOptions flags);
none gtk_calendar_get_date(GtkCalendar *self ,guint* year,guint* month,guint* day);
none gtk_calendar_freeze(GtkCalendar *self );
none gtk_calendar_thaw(GtkCalendar *self );
GtkWidget* gtk_calendar_new();
none gtk_item_factory_construct(GtkItemFactory *self ,GType container_type,const gchar* path,GtkAccelGroup* accel_group);
GtkWidget* gtk_item_factory_get_item(GtkItemFactory *self ,const gchar* path);
GtkWidget* gtk_item_factory_get_widget(GtkItemFactory *self ,const gchar* path);
GtkWidget* gtk_item_factory_get_widget_by_action(GtkItemFactory *self ,guint action);
GtkWidget* gtk_item_factory_get_item_by_action(GtkItemFactory *self ,guint action);
none gtk_item_factory_create_item(GtkItemFactory *self ,GtkItemFactoryEntry* entry,gpointer callback_data,guint callback_type);
none gtk_item_factory_create_items(GtkItemFactory *self ,guint n_entries,GtkItemFactoryEntry* entries,gpointer callback_data);
none gtk_item_factory_delete_item(GtkItemFactory *self ,const gchar* path);
none gtk_item_factory_delete_entry(GtkItemFactory *self ,GtkItemFactoryEntry* entry);
none gtk_item_factory_delete_entries(GtkItemFactory *self ,guint n_entries,GtkItemFactoryEntry* entries);
none gtk_item_factory_popup(GtkItemFactory *self ,guint x,guint y,guint mouse_button,guint32 time_);
none gtk_item_factory_popup_with_data(GtkItemFactory *self ,gpointer popup_data,GtkDestroyNotify destroy,guint x,guint y,guint mouse_button,guint32 time_);
gpointer gtk_item_factory_popup_data(GtkItemFactory *self );
none gtk_item_factory_set_translate_func(GtkItemFactory *self ,GtkTranslateFunc func,gpointer data,GtkDestroyNotify notify);
none gtk_item_factory_create_items_ac(GtkItemFactory *self ,guint n_entries,GtkItemFactoryEntry* entries,gpointer callback_data,guint callback_type);
GtkItemFactory* gtk_item_factory_new(GType container_type,const gchar* path,GtkAccelGroup* accel_group);
none gtk_cell_renderer_get_size(GtkCellRenderer *self ,GtkWidget* widget,GdkRectangle* cell_area,gint* x_offset,gint* y_offset,gint* width,gint* height);
none gtk_cell_renderer_render(GtkCellRenderer *self ,GdkWindow* window,GtkWidget* widget,GdkRectangle* background_area,GdkRectangle* cell_area,GdkRectangle* expose_area,GtkCellRendererState flags);
gboolean gtk_cell_renderer_activate(GtkCellRenderer *self ,GdkEvent* event,GtkWidget* widget,const gchar* path,GdkRectangle* background_area,GdkRectangle* cell_area,GtkCellRendererState flags);
GtkCellEditable* gtk_cell_renderer_start_editing(GtkCellRenderer *self ,GdkEvent* event,GtkWidget* widget,const gchar* path,GdkRectangle* background_area,GdkRectangle* cell_area,GtkCellRendererState flags);
none gtk_cell_renderer_set_fixed_size(GtkCellRenderer *self ,gint width,gint height);
none gtk_cell_renderer_get_fixed_size(GtkCellRenderer *self ,gint* width,gint* height);
none gtk_cell_renderer_editing_canceled(GtkCellRenderer *self );
none gtk_cell_renderer_stop_editing(GtkCellRenderer *self ,gboolean canceled);
GtkCellRenderer* gtk_cell_renderer_progress_new();
GtkCellRenderer* gtk_cell_renderer_pixbuf_new();
none gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText *self ,gint number_of_rows);
GtkCellRenderer* gtk_cell_renderer_text_new();
GtkCellRenderer* gtk_cell_renderer_combo_new();
gboolean gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle *self );
none gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle *self ,gboolean radio);
gboolean gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle *self );
none gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle *self ,gboolean setting);
GtkCellRenderer* gtk_cell_renderer_toggle_new();
none gtk_adjustment_changed(GtkAdjustment *self );
none gtk_adjustment_value_changed(GtkAdjustment *self );
none gtk_adjustment_clamp_page(GtkAdjustment *self ,gdouble lower,gdouble upper);
gdouble gtk_adjustment_get_value(GtkAdjustment *self );
none gtk_adjustment_set_value(GtkAdjustment *self ,gdouble value);
GtkObject* gtk_adjustment_new(gdouble value,gdouble lower,gdouble upper,gdouble step_increment,gdouble page_increment,gdouble page_size);
GtkRcStyle* gtk_rc_style_copy(GtkRcStyle *self );
none gtk_rc_style_ref(GtkRcStyle *self );
none gtk_rc_style_unref(GtkRcStyle *self );
GtkRcStyle* gtk_rc_style_new();
none gtk_settings_set_property_value(GtkSettings *self ,const gchar* name,const GtkSettingsValue* svalue);
none gtk_settings_set_string_property(GtkSettings *self ,const gchar* name,const gchar* v_string,const gchar* origin);
none gtk_settings_set_long_property(GtkSettings *self ,const gchar* name,glong v_long,const gchar* origin);
none gtk_settings_set_double_property(GtkSettings *self ,const gchar* name,gdouble v_double,const gchar* origin);
none gtk_size_group_set_mode(GtkSizeGroup *self ,GtkSizeGroupMode mode);
GtkSizeGroupMode gtk_size_group_get_mode(GtkSizeGroup *self );
none gtk_size_group_set_ignore_hidden(GtkSizeGroup *self ,gboolean ignore_hidden);
gboolean gtk_size_group_get_ignore_hidden(GtkSizeGroup *self );
none gtk_size_group_add_widget(GtkSizeGroup *self ,GtkWidget* widget);
none gtk_size_group_remove_widget(GtkSizeGroup *self ,GtkWidget* widget);
GtkSizeGroup* gtk_size_group_new(GtkSizeGroupMode mode);
GtkStyle* gtk_style_copy(GtkStyle *self );
GtkStyle* gtk_style_attach(GtkStyle *self ,GdkWindow* window);
none gtk_style_detach(GtkStyle *self );
GtkStyle* gtk_style_ref(GtkStyle *self );
none gtk_style_unref(GtkStyle *self );
GdkFont* gtk_style_get_font(GtkStyle *self );
none gtk_style_set_font(GtkStyle *self ,GdkFont* font);
none gtk_style_set_background(GtkStyle *self ,GdkWindow* window,GtkStateType state_type);
none gtk_style_apply_default_background(GtkStyle *self ,GdkWindow* window,gboolean set_bg,GtkStateType state_type,GdkRectangle* area,gint x,gint y,gint width,gint height);
GtkIconSet* gtk_style_lookup_icon_set(GtkStyle *self ,const gchar* stock_id);
GdkPixbuf* gtk_style_render_icon(GtkStyle *self ,const GtkIconSource* source,GtkTextDirection direction,GtkStateType state,GtkIconSize size,GtkWidget* widget,const gchar* detail);
GtkStyle* gtk_style_new();
gint gtk_text_buffer_get_line_count(GtkTextBuffer *self );
gint gtk_text_buffer_get_char_count(GtkTextBuffer *self );
GtkTextTagTable* gtk_text_buffer_get_tag_table(GtkTextBuffer *self );
none gtk_text_buffer_set_text(GtkTextBuffer *self ,const gchar* text,gint len);
none gtk_text_buffer_insert(GtkTextBuffer *self ,GtkTextIter* iter,const gchar* text,gint len);
none gtk_text_buffer_insert_at_cursor(GtkTextBuffer *self ,const gchar* text,gint len);
gboolean gtk_text_buffer_insert_interactive(GtkTextBuffer *self ,GtkTextIter* iter,const gchar* text,gint len,gboolean default_editable);
gboolean gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer *self ,const gchar* text,gint len,gboolean default_editable);
none gtk_text_buffer_insert_range(GtkTextBuffer *self ,GtkTextIter* iter,const GtkTextIter* start,const GtkTextIter* end);
gboolean gtk_text_buffer_insert_range_interactive(GtkTextBuffer *self ,GtkTextIter* iter,const GtkTextIter* start,const GtkTextIter* end,gboolean default_editable);
none gtk_text_buffer_insert_with_tags(GtkTextBuffer *self ,GtkTextIter* iter,const gchar* text,gint len,GtkTextTag* first_tag);
none gtk_text_buffer_insert_with_tags_by_name(GtkTextBuffer *self ,GtkTextIter* iter,const gchar* text,gint len,const gchar* first_tag_name);
none gtk_text_buffer_delete(GtkTextBuffer *self ,GtkTextIter* start,GtkTextIter* end);
gboolean gtk_text_buffer_delete_interactive(GtkTextBuffer *self ,GtkTextIter* start_iter,GtkTextIter* end_iter,gboolean default_editable);
gboolean gtk_text_buffer_backspace(GtkTextBuffer *self ,GtkTextIter* iter,gboolean interactive,gboolean default_editable);
gchar* gtk_text_buffer_get_text(GtkTextBuffer *self ,const GtkTextIter* start,const GtkTextIter* end,gboolean include_hidden_chars);
gchar* gtk_text_buffer_get_slice(GtkTextBuffer *self ,const GtkTextIter* start,const GtkTextIter* end,gboolean include_hidden_chars);
none gtk_text_buffer_insert_pixbuf(GtkTextBuffer *self ,GtkTextIter* iter,GdkPixbuf* pixbuf);
none gtk_text_buffer_insert_child_anchor(GtkTextBuffer *self ,GtkTextIter* iter,GtkTextChildAnchor* anchor);
GtkTextChildAnchor* gtk_text_buffer_create_child_anchor(GtkTextBuffer *self ,GtkTextIter* iter);
GtkTextMark* gtk_text_buffer_create_mark(GtkTextBuffer *self ,const gchar* mark_name,const GtkTextIter* where,gboolean left_gravity);
none gtk_text_buffer_move_mark(GtkTextBuffer *self ,GtkTextMark* mark,const GtkTextIter* where);
none gtk_text_buffer_delete_mark(GtkTextBuffer *self ,GtkTextMark* mark);
GtkTextMark* gtk_text_buffer_get_mark(GtkTextBuffer *self ,const gchar* name);
none gtk_text_buffer_move_mark_by_name(GtkTextBuffer *self ,const gchar* name,const GtkTextIter* where);
none gtk_text_buffer_delete_mark_by_name(GtkTextBuffer *self ,const gchar* name);
GtkTextMark* gtk_text_buffer_get_insert(GtkTextBuffer *self );
GtkTextMark* gtk_text_buffer_get_selection_bound(GtkTextBuffer *self );
none gtk_text_buffer_place_cursor(GtkTextBuffer *self ,const GtkTextIter* where);
none gtk_text_buffer_select_range(GtkTextBuffer *self ,const GtkTextIter* ins,const GtkTextIter* bound);
none gtk_text_buffer_apply_tag(GtkTextBuffer *self ,GtkTextTag* tag,const GtkTextIter* start,const GtkTextIter* end);
none gtk_text_buffer_remove_tag(GtkTextBuffer *self ,GtkTextTag* tag,const GtkTextIter* start,const GtkTextIter* end);
none gtk_text_buffer_apply_tag_by_name(GtkTextBuffer *self ,const gchar* name,const GtkTextIter* start,const GtkTextIter* end);
none gtk_text_buffer_remove_tag_by_name(GtkTextBuffer *self ,const gchar* name,const GtkTextIter* start,const GtkTextIter* end);
none gtk_text_buffer_remove_all_tags(GtkTextBuffer *self ,const GtkTextIter* start,const GtkTextIter* end);
GtkTextTag* gtk_text_buffer_create_tag(GtkTextBuffer *self ,const gchar* tag_name,const gchar* first_property_name);
none gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer *self ,GtkTextIter* iter,gint line_number,gint char_offset);
none gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer *self ,GtkTextIter* iter,gint line_number,gint byte_index);
none gtk_text_buffer_get_iter_at_offset(GtkTextBuffer *self ,GtkTextIter* iter,gint char_offset);
none gtk_text_buffer_get_iter_at_line(GtkTextBuffer *self ,GtkTextIter* iter,gint line_number);
none gtk_text_buffer_get_start_iter(GtkTextBuffer *self ,GtkTextIter* iter);
none gtk_text_buffer_get_end_iter(GtkTextBuffer *self ,GtkTextIter* iter);
none gtk_text_buffer_get_bounds(GtkTextBuffer *self ,GtkTextIter* start,GtkTextIter* end);
none gtk_text_buffer_get_iter_at_mark(GtkTextBuffer *self ,GtkTextIter* iter,GtkTextMark* mark);
none gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer *self ,GtkTextIter* iter,GtkTextChildAnchor* anchor);
gboolean gtk_text_buffer_get_modified(GtkTextBuffer *self );
none gtk_text_buffer_set_modified(GtkTextBuffer *self ,gboolean setting);
none gtk_text_buffer_add_selection_clipboard(GtkTextBuffer *self ,GtkClipboard* clipboard);
none gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer *self ,GtkClipboard* clipboard);
none gtk_text_buffer_cut_clipboard(GtkTextBuffer *self ,GtkClipboard* clipboard,gboolean default_editable);
none gtk_text_buffer_copy_clipboard(GtkTextBuffer *self ,GtkClipboard* clipboard);
none gtk_text_buffer_paste_clipboard(GtkTextBuffer *self ,GtkClipboard* clipboard,GtkTextIter* override_location,gboolean default_editable);
gboolean gtk_text_buffer_get_selection_bounds(GtkTextBuffer *self ,GtkTextIter* start,GtkTextIter* end);
gboolean gtk_text_buffer_delete_selection(GtkTextBuffer *self ,gboolean interactive,gboolean default_editable);
none gtk_text_buffer_begin_user_action(GtkTextBuffer *self );
none gtk_text_buffer_end_user_action(GtkTextBuffer *self );
GtkTextBuffer* gtk_text_buffer_new(GtkTextTagTable* table);
GList* gtk_text_child_anchor_get_widgets(GtkTextChildAnchor *self );
gboolean gtk_text_child_anchor_get_deleted(GtkTextChildAnchor *self );
none gtk_text_child_anchor_register_child(GtkTextChildAnchor *self ,GtkWidget* child,GtkTextLayout* layout);
none gtk_text_child_anchor_unregister_child(GtkTextChildAnchor *self ,GtkWidget* child);
none gtk_text_child_anchor_queue_resize(GtkTextChildAnchor *self ,GtkTextLayout* layout);
GtkTextChildAnchor* gtk_text_child_anchor_new();
none gtk_text_mark_set_visible(GtkTextMark *self ,gboolean setting);
gboolean gtk_text_mark_get_visible(GtkTextMark *self );
const gchar* gtk_text_mark_get_name(GtkTextMark *self );
gboolean gtk_text_mark_get_deleted(GtkTextMark *self );
GtkTextBuffer* gtk_text_mark_get_buffer(GtkTextMark *self );
gboolean gtk_text_mark_get_left_gravity(GtkTextMark *self );
gint gtk_text_tag_get_priority(GtkTextTag *self );
none gtk_text_tag_set_priority(GtkTextTag *self ,gint priority);
gboolean gtk_text_tag_event(GtkTextTag *self ,GObject* event_object,GdkEvent* event,const GtkTextIter* iter);
GtkTextTag* gtk_text_tag_new(const gchar* name);
none gtk_text_tag_table_add(GtkTextTagTable *self ,GtkTextTag* tag);
none gtk_text_tag_table_remove(GtkTextTagTable *self ,GtkTextTag* tag);
GtkTextTag* gtk_text_tag_table_lookup(GtkTextTagTable *self ,const gchar* name);
none gtk_text_tag_table_foreach(GtkTextTagTable *self ,GtkTextTagTableForeach func,gpointer data);
gint gtk_text_tag_table_get_size(GtkTextTagTable *self );
GtkTextTagTable* gtk_text_tag_table_new();
none gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter *self ,GtkTreeModelFilterVisibleFunc func,gpointer data,GtkDestroyNotify destroy);
none gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter *self ,gint n_columns,GType* types,GtkTreeModelFilterModifyFunc func,gpointer data,GtkDestroyNotify destroy);
none gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter *self ,gint column);
GtkTreeModel* gtk_tree_model_filter_get_model(GtkTreeModelFilter *self );
none gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter *self ,GtkTreeIter* filter_iter,GtkTreeIter* child_iter);
none gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter *self ,GtkTreeIter* child_iter,GtkTreeIter* filter_iter);
GtkTreePath* gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter *self ,GtkTreePath* child_path);
GtkTreePath* gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter *self ,GtkTreePath* filter_path);
none gtk_tree_model_filter_refilter(GtkTreeModelFilter *self );
none gtk_tree_model_filter_clear_cache(GtkTreeModelFilter *self );
GtkTreeModel* gtk_tree_model_sort_get_model(GtkTreeModelSort *self );
GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort *self ,GtkTreePath* child_path);
none gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort *self ,GtkTreeIter* sort_iter,GtkTreeIter* child_iter);
GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort *self ,GtkTreePath* sorted_path);
none gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort *self ,GtkTreeIter* child_iter,GtkTreeIter* sorted_iter);
none gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort *self );
none gtk_tree_model_sort_clear_cache(GtkTreeModelSort *self );
gboolean gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort *self ,GtkTreeIter* iter);
none gtk_tree_selection_set_mode(GtkTreeSelection *self ,GtkSelectionMode type);
GtkSelectionMode gtk_tree_selection_get_mode(GtkTreeSelection *self );
none gtk_tree_selection_set_select_function(GtkTreeSelection *self ,GtkTreeSelectionFunc func,gpointer data,GtkDestroyNotify destroy);
gpointer gtk_tree_selection_get_user_data(GtkTreeSelection *self );
GtkTreeView* gtk_tree_selection_get_tree_view(GtkTreeSelection *self );
gboolean gtk_tree_selection_get_selected(GtkTreeSelection *self ,GtkTreeModel** model,GtkTreeIter* iter);
GList* gtk_tree_selection_get_selected_rows(GtkTreeSelection *self ,GtkTreeModel** model);
gint gtk_tree_selection_count_selected_rows(GtkTreeSelection *self );
none gtk_tree_selection_selected_foreach(GtkTreeSelection *self ,GtkTreeSelectionForeachFunc func,gpointer data);
none gtk_tree_selection_select_path(GtkTreeSelection *self ,GtkTreePath* path);
none gtk_tree_selection_unselect_path(GtkTreeSelection *self ,GtkTreePath* path);
none gtk_tree_selection_select_iter(GtkTreeSelection *self ,GtkTreeIter* iter);
none gtk_tree_selection_unselect_iter(GtkTreeSelection *self ,GtkTreeIter* iter);
gboolean gtk_tree_selection_path_is_selected(GtkTreeSelection *self ,GtkTreePath* path);
gboolean gtk_tree_selection_iter_is_selected(GtkTreeSelection *self ,GtkTreeIter* iter);
none gtk_tree_selection_select_all(GtkTreeSelection *self );
none gtk_tree_selection_unselect_all(GtkTreeSelection *self );
none gtk_tree_selection_select_range(GtkTreeSelection *self ,GtkTreePath* start_path,GtkTreePath* end_path);
none gtk_tree_selection_unselect_range(GtkTreeSelection *self ,GtkTreePath* start_path,GtkTreePath* end_path);
none gtk_tree_store_set_column_types(GtkTreeStore *self ,gint n_columns,GType* types);
none gtk_tree_store_set_value(GtkTreeStore *self ,GtkTreeIter* iter,gint column,GValue* value);
none gtk_tree_store_set(GtkTreeStore *self ,GtkTreeIter* iter);
none gtk_tree_store_set_valist(GtkTreeStore *self ,GtkTreeIter* iter,va_list var_args);
gboolean gtk_tree_store_remove(GtkTreeStore *self ,GtkTreeIter* iter);
none gtk_tree_store_insert(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* parent,gint position);
none gtk_tree_store_insert_before(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* parent,GtkTreeIter* sibling);
none gtk_tree_store_insert_after(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* parent,GtkTreeIter* sibling);
none gtk_tree_store_prepend(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* parent);
none gtk_tree_store_append(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* parent);
gboolean gtk_tree_store_is_ancestor(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* descendant);
gint gtk_tree_store_iter_depth(GtkTreeStore *self ,GtkTreeIter* iter);
none gtk_tree_store_clear(GtkTreeStore *self );
gboolean gtk_tree_store_iter_is_valid(GtkTreeStore *self ,GtkTreeIter* iter);
none gtk_tree_store_reorder(GtkTreeStore *self ,GtkTreeIter* parent,gint* new_order);
none gtk_tree_store_swap(GtkTreeStore *self ,GtkTreeIter* a,GtkTreeIter* b);
none gtk_tree_store_move_before(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* position);
none gtk_tree_store_move_after(GtkTreeStore *self ,GtkTreeIter* iter,GtkTreeIter* position);
GtkTreeStore* gtk_tree_store_new(gint n_columns);
none gtk_ui_manager_set_add_tearoffs(GtkUIManager *self ,gboolean add_tearoffs);
gboolean gtk_ui_manager_get_add_tearoffs(GtkUIManager *self );
none gtk_ui_manager_insert_action_group(GtkUIManager *self ,GtkActionGroup* action_group,gint pos);
none gtk_ui_manager_remove_action_group(GtkUIManager *self ,GtkActionGroup* action_group);
GList* gtk_ui_manager_get_action_groups(GtkUIManager *self );
GtkAccelGroup* gtk_ui_manager_get_accel_group(GtkUIManager *self );
GtkWidget* gtk_ui_manager_get_widget(GtkUIManager *self ,const gchar* path);
GSList* gtk_ui_manager_get_toplevels(GtkUIManager *self ,GtkUIManagerItemType types);
GtkAction* gtk_ui_manager_get_action(GtkUIManager *self ,const gchar* path);
guint gtk_ui_manager_add_ui_from_string(GtkUIManager *self ,const gchar* buffer,gssize length,GError** error);
guint gtk_ui_manager_add_ui_from_file(GtkUIManager *self ,const gchar* filename,GError** error);
none gtk_ui_manager_add_ui(GtkUIManager *self ,guint merge_id,const gchar* path,const gchar* name,const gchar* action,GtkUIManagerItemType type,gboolean top);
none gtk_ui_manager_remove_ui(GtkUIManager *self ,guint merge_id);
gchar* gtk_ui_manager_get_ui(GtkUIManager *self );
none gtk_ui_manager_ensure_update(GtkUIManager *self );
guint gtk_ui_manager_new_merge_id(GtkUIManager *self );
none gtk_window_group_add_window(GtkWindowGroup *self ,GtkWindow* window);
none gtk_window_group_remove_window(GtkWindowGroup *self ,GtkWindow* window);
GtkWindowGroup* gtk_window_group_new();
